schema {
  query: QueryRoot
  mutation: Mutation
}

"""Marks an element of a GraphQL schema as having restricted access."""
directive @accessRestricted(
  """Explains the reason around this restriction"""
  reason: String = null
) on FIELD_DEFINITION | OBJECT

"A version of the API, as defined by [Shopify API versioning](https://shopify.dev/api/usage/versioning).\nVersions are commonly referred to by their handle (for example, `2021-10`).\n"
type ApiVersion {
  """The human-readable name of the version."""
  displayName: String!

  """
  The unique identifier of an ApiVersion. All supported API versions have a date-based (YYYY-MM) or `unstable` handle.
  """
  handle: String!

  """
  Whether the version is actively supported by Shopify. Supported API versions are guaranteed to be stable. Unsupported API versions include unstable, release candidate, and end-of-life versions that are marked as unsupported. For more information, refer to [Versioning](https://shopify.dev/concepts/about-apis/versioning).
  """
  supported: Boolean!
}

"""Details about the gift card used on the checkout."""
type AppliedGiftCard implements Node {
  """The amount that was taken from the gift card by applying it."""
  amountUsed: Money! @deprecated(reason: "Use `amountUsedV2` instead")

  """The amount that was taken from the gift card by applying it."""
  amountUsedV2: MoneyV2!

  """The amount left on the gift card."""
  balance: Money! @deprecated(reason: "Use `balanceV2` instead")

  """The amount left on the gift card."""
  balanceV2: MoneyV2!

  """A globally-unique identifier."""
  id: ID!

  """The last characters of the gift card."""
  lastCharacters: String!

  """The amount that was applied to the checkout in its currency."""
  presentmentAmountUsed: MoneyV2!
}

"""An article in an online store blog."""
type Article implements Node {
  """The article's author."""
  author: ArticleAuthor! @deprecated(reason: "Use `authorV2` instead")

  """The article's author."""
  authorV2: ArticleAuthor

  """The blog that the article belongs to."""
  blog: Blog!

  """List of comments posted on the article."""
  comments(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): CommentConnection!

  """Stripped content of the article, single line with HTML tags removed."""
  content(
    """Truncates string after the given length."""
    truncateAt: Int
  ): String!

  """The content of the article, complete with HTML formatting."""
  contentHtml: HTML!

  """Stripped excerpt of the article, single line with HTML tags removed."""
  excerpt(
    """Truncates string after the given length."""
    truncateAt: Int
  ): String

  """The excerpt of the article, complete with HTML formatting."""
  excerptHtml: HTML

  "A human-friendly unique string for the Article automatically generated from its title.\n"
  handle: String!

  """A globally-unique identifier."""
  id: ID!

  """The image associated with the article."""
  image(
    """
    Crops the image according to the specified region. This argument is deprecated: Use `crop` on `Image.transformedSrc` instead.
    """
    crop: CropRegion

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image size multiplier for high-resolution retina displays. Must be between 1 and 3. This argument is deprecated: Use `scale` on `Image.transformedSrc` instead.
    """
    scale: Int = 1
  ): Image

  """The date and time when the article was published."""
  publishedAt: DateTime!

  """The article’s SEO information."""
  seo: SEO

  """A categorization that a article can be tagged with."""
  tags: [String!]!

  """The article’s name."""
  title: String!

  """The url pointing to the article accessible from the web."""
  url: URL! @deprecated(reason: "Use `onlineStoreUrl` instead")
}

"""The author of an article."""
type ArticleAuthor {
  """The author's bio."""
  bio: String

  """The author’s email."""
  email: String!

  """The author's first name."""
  firstName: String!

  """The author's last name."""
  lastName: String!

  """The author's full name."""
  name: String!
}

"An auto-generated type for paginating through multiple Articles.\n"
type ArticleConnection {
  """A list of edges."""
  edges: [ArticleEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one Article and a cursor during pagination.\n"
type ArticleEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ArticleEdge."""
  node: Article!
}

"""The set of valid sort keys for the Article query."""
enum ArticleSortKeys {
  """Sort by the `author` value."""
  AUTHOR

  """Sort by the `blog_title` value."""
  BLOG_TITLE

  """Sort by the `id` value."""
  ID

  """Sort by the `published_at` value."""
  PUBLISHED_AT

  "During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the\nresults by relevance to the search term(s). When no search query is specified, this sort key is not\ndeterministic and should not be used.\n"
  RELEVANCE

  """Sort by the `title` value."""
  TITLE

  """Sort by the `updated_at` value."""
  UPDATED_AT
}

"""Represents a generic custom attribute."""
type Attribute {
  """Key or name of the attribute."""
  key: String!

  """Value of the attribute."""
  value: String
}

"""Specifies the input fields required for an attribute."""
input AttributeInput {
  """Key or name of the attribute."""
  key: String!

  """Value of the attribute."""
  value: String!
}

"Automatic discount applications capture the intentions of a discount that was automatically applied.\n"
type AutomaticDiscountApplication implements DiscountApplication {
  """
  The method by which the discount's value is allocated to its entitled items.
  """
  allocationMethod: DiscountApplicationAllocationMethod!

  """Which lines of targetType that the discount is allocated over."""
  targetSelection: DiscountApplicationTargetSelection!

  """The type of line that the discount is applicable towards."""
  targetType: DiscountApplicationTargetType!

  """The title of the application."""
  title: String!

  """The value of the discount application."""
  value: PricingValue!
}

"""A collection of available shipping rates for a checkout."""
type AvailableShippingRates {
  "Whether or not the shipping rates are ready.\nThe `shippingRates` field is `null` when this value is `false`.\nThis field should be polled until its value becomes `true`.\n"
  ready: Boolean!

  """The fetched shipping rates. `null` until the `ready` field is `true`."""
  shippingRates: [ShippingRate!]
}

"""An online store blog."""
type Blog implements Node {
  """Find an article by its handle."""
  articleByHandle(
    """The handle of the article."""
    handle: String!
  ): Article

  """List of the blog's articles."""
  articles(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `author`\n - `blog_title`\n - `created_at`\n - `tag`\n - `tag_not`\n - `updated_at`\n\nSee the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ArticleSortKeys = ID
  ): ArticleConnection!

  """The authors who have contributed to the blog."""
  authors: [ArticleAuthor!]!

  "A human-friendly unique string for the Blog automatically generated from its title.\n"
  handle: String!

  """A globally-unique identifier."""
  id: ID!

  """The blog's SEO information."""
  seo: SEO

  """The blogs’s title."""
  title: String!

  """The url pointing to the blog accessible from the web."""
  url: URL! @deprecated(reason: "Use `onlineStoreUrl` instead")
}

"An auto-generated type for paginating through multiple Blogs.\n"
type BlogConnection {
  """A list of edges."""
  edges: [BlogEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one Blog and a cursor during pagination.\n"
type BlogEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of BlogEdge."""
  node: Blog!
}

"""The set of valid sort keys for the Blog query."""
enum BlogSortKeys {
  """Sort by the `handle` value."""
  HANDLE

  """Sort by the `id` value."""
  ID

  "During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the\nresults by relevance to the search term(s). When no search query is specified, this sort key is not\ndeterministic and should not be used.\n"
  RELEVANCE

  """Sort by the `title` value."""
  TITLE
}

"""
Card brand, such as Visa or Mastercard, which can be used for payments.
"""
enum CardBrand {
  """American Express."""
  AMERICAN_EXPRESS

  """Diners Club."""
  DINERS_CLUB

  """Discover."""
  DISCOVER

  """JCB."""
  JCB

  """Mastercard."""
  MASTERCARD

  """Visa."""
  VISA
}

"""
A container for all the information required to checkout items and pay.
"""
type Checkout implements Node {
  """The gift cards used on the checkout."""
  appliedGiftCards: [AppliedGiftCard!]!

  "The available shipping rates for this Checkout.\nShould only be used when checkout `requiresShipping` is `true` and\nthe shipping address is valid.\n"
  availableShippingRates: AvailableShippingRates

  """The date and time when the checkout was completed."""
  completedAt: DateTime

  """The date and time when the checkout was created."""
  createdAt: DateTime!

  """The currency code for the Checkout."""
  currencyCode: CurrencyCode!

  """A list of extra information that is added to the checkout."""
  customAttributes: [Attribute!]!

  """The customer associated with the checkout."""
  customer: Customer @deprecated(reason: "This field will always return null. If you have an authentication token for the customer, you can use the `customer` field on the query root to retrieve it.")

  """Discounts that have been applied on the checkout."""
  discountApplications(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): DiscountApplicationConnection!

  """The email attached to this checkout."""
  email: String

  """A globally-unique identifier."""
  id: ID!

  """
  A list of line item objects, each one containing information about an item in the checkout.
  """
  lineItems(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): CheckoutLineItemConnection!

  """
  The sum of all the prices of all the items in the checkout. Duties, taxes, shipping and discounts excluded.
  """
  lineItemsSubtotalPrice: MoneyV2!

  """The note associated with the checkout."""
  note: String

  """The resulting order from a paid checkout."""
  order: Order

  """
  The Order Status Page for this Checkout, null when checkout is not completed.
  """
  orderStatusUrl: URL

  """
  The amount left to be paid. This is equal to the cost of the line items, taxes and shipping minus discounts and gift cards.
  """
  paymentDue: Money! @deprecated(reason: "Use `paymentDueV2` instead")

  """
  The amount left to be paid. This is equal to the cost of the line items, duties, taxes and shipping minus discounts and gift cards.
  """
  paymentDueV2: MoneyV2!

  "Whether or not the Checkout is ready and can be completed. Checkouts may\nhave asynchronous operations that can take time to finish. If you want\nto complete a checkout or ensure all the fields are populated and up to\ndate, polling is required until the value is true.\n"
  ready: Boolean!

  """States whether or not the fulfillment requires shipping."""
  requiresShipping: Boolean!

  """The shipping address to where the line items will be shipped."""
  shippingAddress: MailingAddress

  "The discounts that have been allocated onto the shipping line by discount applications.\n"
  shippingDiscountAllocations: [DiscountAllocation!]!

  """
  Once a shipping rate is selected by the customer it is transitioned to a `shipping_line` object.
  """
  shippingLine: ShippingRate

  """Price of the checkout before shipping and taxes."""
  subtotalPrice: Money! @deprecated(reason: "Use `subtotalPriceV2` instead")

  """Price of the checkout before duties, shipping and taxes."""
  subtotalPriceV2: MoneyV2!

  """Specifies if the Checkout is tax exempt."""
  taxExempt: Boolean!

  """
  Specifies if taxes are included in the line item and shipping line prices.
  """
  taxesIncluded: Boolean!

  """The sum of all the duties applied to the line items in the checkout."""
  totalDuties: MoneyV2

  """
  The sum of all the prices of all the items in the checkout, taxes and discounts included.
  """
  totalPrice: Money! @deprecated(reason: "Use `totalPriceV2` instead")

  """
  The sum of all the prices of all the items in the checkout, duties, taxes and discounts included.
  """
  totalPriceV2: MoneyV2!

  """
  The sum of all the taxes applied to the line items and shipping lines in the checkout.
  """
  totalTax: Money! @deprecated(reason: "Use `totalTaxV2` instead")

  """
  The sum of all the taxes applied to the line items and shipping lines in the checkout.
  """
  totalTaxV2: MoneyV2!

  """The date and time when the checkout was last updated."""
  updatedAt: DateTime!

  """The url pointing to the checkout accessible from the web."""
  webUrl: URL!
}

"""Specifies the fields required to update a checkout's attributes."""
input CheckoutAttributesUpdateInput {
  "Allows setting partial addresses on a Checkout, skipping the full validation of attributes.\nThe required attributes are city, province, and country.\nFull validation of the addresses is still done at completion time. Defaults to `false` with\neach operation.\n"
  allowPartialAddresses: Boolean = false

  """A list of extra information that is added to the checkout."""
  customAttributes: [AttributeInput!]

  """
  The text of an optional note that a shop owner can attach to the checkout.
  """
  note: String
}

"""Return type for `checkoutAttributesUpdate` mutation."""
type CheckoutAttributesUpdatePayload {
  """The updated checkout object."""
  checkout: Checkout!

  """The list of errors that occurred from executing the mutation."""
  checkoutUserErrors: [CheckoutUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `checkoutUserErrors` instead")
}

"""Specifies the fields required to update a checkout's attributes."""
input CheckoutAttributesUpdateV2Input {
  "Allows setting partial addresses on a Checkout, skipping the full validation of attributes.\nThe required attributes are city, province, and country.\nFull validation of the addresses is still done at completion time. Defaults to `false` with \neach operation.\n"
  allowPartialAddresses: Boolean = false

  """A list of extra information that is added to the checkout."""
  customAttributes: [AttributeInput!]

  """
  The text of an optional note that a shop owner can attach to the checkout.
  """
  note: String
}

"""Return type for `checkoutAttributesUpdateV2` mutation."""
type CheckoutAttributesUpdateV2Payload {
  """The updated checkout object."""
  checkout: Checkout

  """The list of errors that occurred from executing the mutation."""
  checkoutUserErrors: [CheckoutUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `checkoutUserErrors` instead")
}

"""Return type for `checkoutCompleteFree` mutation."""
type CheckoutCompleteFreePayload {
  """The updated checkout object."""
  checkout: Checkout

  """The list of errors that occurred from executing the mutation."""
  checkoutUserErrors: [CheckoutUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `checkoutUserErrors` instead")
}

"""Return type for `checkoutCompleteWithCreditCard` mutation."""
type CheckoutCompleteWithCreditCardPayload {
  """The checkout on which the payment was applied."""
  checkout: Checkout!

  """The list of errors that occurred from executing the mutation."""
  checkoutUserErrors: [CheckoutUserError!]!

  """A representation of the attempted payment."""
  payment: Payment

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `checkoutUserErrors` instead")
}

"""Return type for `checkoutCompleteWithCreditCardV2` mutation."""
type CheckoutCompleteWithCreditCardV2Payload {
  """The checkout on which the payment was applied."""
  checkout: Checkout

  """The list of errors that occurred from executing the mutation."""
  checkoutUserErrors: [CheckoutUserError!]!

  """A representation of the attempted payment."""
  payment: Payment

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `checkoutUserErrors` instead")
}

"""Return type for `checkoutCompleteWithTokenizedPayment` mutation."""
type CheckoutCompleteWithTokenizedPaymentPayload {
  """The checkout on which the payment was applied."""
  checkout: Checkout!

  """The list of errors that occurred from executing the mutation."""
  checkoutUserErrors: [CheckoutUserError!]!

  """A representation of the attempted payment."""
  payment: Payment

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `checkoutUserErrors` instead")
}

"""Return type for `checkoutCompleteWithTokenizedPaymentV2` mutation."""
type CheckoutCompleteWithTokenizedPaymentV2Payload {
  """The checkout on which the payment was applied."""
  checkout: Checkout

  """The list of errors that occurred from executing the mutation."""
  checkoutUserErrors: [CheckoutUserError!]!

  """A representation of the attempted payment."""
  payment: Payment

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `checkoutUserErrors` instead")
}

"""Return type for `checkoutCompleteWithTokenizedPaymentV3` mutation."""
type CheckoutCompleteWithTokenizedPaymentV3Payload {
  """The checkout on which the payment was applied."""
  checkout: Checkout

  """The list of errors that occurred from executing the mutation."""
  checkoutUserErrors: [CheckoutUserError!]!

  """A representation of the attempted payment."""
  payment: Payment

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `checkoutUserErrors` instead")
}

"""Specifies the fields required to create a checkout."""
input CheckoutCreateInput {
  "Allows setting partial addresses on a Checkout, skipping the full validation of attributes.\nThe required attributes are city, province, and country.\nFull validation of addresses is still done at completion time. Defaults to `null`.\n"
  allowPartialAddresses: Boolean

  """A list of extra information that is added to the checkout."""
  customAttributes: [AttributeInput!]

  """The email with which the customer wants to checkout."""
  email: String

  """
  A list of line item objects, each one containing information about an item in the checkout.
  """
  lineItems: [CheckoutLineItemInput!]

  """
  The text of an optional note that a shop owner can attach to the checkout.
  """
  note: String

  """
  The three-letter currency code of one of the shop's enabled presentment currencies.
  Including this field creates a checkout in the specified currency. By default, new
  checkouts are created in the shop's primary currency.
   This argument is deprecated: Use `country` field instead.
  """
  presentmentCurrencyCode: CurrencyCode

  """The shipping address to where the line items will be shipped."""
  shippingAddress: MailingAddressInput
}

"""Return type for `checkoutCreate` mutation."""
type CheckoutCreatePayload {
  """The new checkout object."""
  checkout: Checkout

  """The list of errors that occurred from executing the mutation."""
  checkoutUserErrors: [CheckoutUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `checkoutUserErrors` instead")
}

"""Return type for `checkoutCustomerAssociate` mutation."""
type CheckoutCustomerAssociatePayload {
  """The updated checkout object."""
  checkout: Checkout!

  """The associated customer object."""
  customer: Customer

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `checkoutCustomerAssociateV2` mutation."""
type CheckoutCustomerAssociateV2Payload {
  """The updated checkout object."""
  checkout: Checkout

  """The list of errors that occurred from executing the mutation."""
  checkoutUserErrors: [CheckoutUserError!]!

  """The associated customer object."""
  customer: Customer

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `checkoutUserErrors` instead")
}

"""Return type for `checkoutCustomerDisassociate` mutation."""
type CheckoutCustomerDisassociatePayload {
  """The updated checkout object."""
  checkout: Checkout!

  """The list of errors that occurred from executing the mutation."""
  checkoutUserErrors: [CheckoutUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `checkoutUserErrors` instead")
}

"""Return type for `checkoutCustomerDisassociateV2` mutation."""
type CheckoutCustomerDisassociateV2Payload {
  """The updated checkout object."""
  checkout: Checkout

  """The list of errors that occurred from executing the mutation."""
  checkoutUserErrors: [CheckoutUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `checkoutUserErrors` instead")
}

"""Return type for `checkoutDiscountCodeApply` mutation."""
type CheckoutDiscountCodeApplyPayload {
  """The updated checkout object."""
  checkout: Checkout!

  """The list of errors that occurred from executing the mutation."""
  checkoutUserErrors: [CheckoutUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `checkoutUserErrors` instead")
}

"""Return type for `checkoutDiscountCodeApplyV2` mutation."""
type CheckoutDiscountCodeApplyV2Payload {
  """The updated checkout object."""
  checkout: Checkout

  """The list of errors that occurred from executing the mutation."""
  checkoutUserErrors: [CheckoutUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `checkoutUserErrors` instead")
}

"""Return type for `checkoutDiscountCodeRemove` mutation."""
type CheckoutDiscountCodeRemovePayload {
  """The updated checkout object."""
  checkout: Checkout

  """The list of errors that occurred from executing the mutation."""
  checkoutUserErrors: [CheckoutUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `checkoutUserErrors` instead")
}

"""Return type for `checkoutEmailUpdate` mutation."""
type CheckoutEmailUpdatePayload {
  """The checkout object with the updated email."""
  checkout: Checkout!

  """The list of errors that occurred from executing the mutation."""
  checkoutUserErrors: [CheckoutUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `checkoutUserErrors` instead")
}

"""Return type for `checkoutEmailUpdateV2` mutation."""
type CheckoutEmailUpdateV2Payload {
  """The checkout object with the updated email."""
  checkout: Checkout

  """The list of errors that occurred from executing the mutation."""
  checkoutUserErrors: [CheckoutUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `checkoutUserErrors` instead")
}

"""Possible error codes that can be returned by `CheckoutUserError`."""
enum CheckoutErrorCode {
  """Checkout is already completed."""
  ALREADY_COMPLETED

  """Input email contains an invalid domain name."""
  BAD_DOMAIN

  """The input value is blank."""
  BLANK

  """Cart does not meet discount requirements notice."""
  CART_DOES_NOT_MEET_DISCOUNT_REQUIREMENTS_NOTICE

  """Customer already used once per customer discount notice."""
  CUSTOMER_ALREADY_USED_ONCE_PER_CUSTOMER_DISCOUNT_NOTICE

  """Discount already applied."""
  DISCOUNT_ALREADY_APPLIED

  """Discount disabled."""
  DISCOUNT_DISABLED

  """Discount expired."""
  DISCOUNT_EXPIRED

  """Discount limit reached."""
  DISCOUNT_LIMIT_REACHED

  """Discount not found."""
  DISCOUNT_NOT_FOUND

  """Checkout is already completed."""
  EMPTY

  """Gift card has already been applied."""
  GIFT_CARD_ALREADY_APPLIED

  """Gift card code is invalid."""
  GIFT_CARD_CODE_INVALID

  """Gift card currency does not match checkout currency."""
  GIFT_CARD_CURRENCY_MISMATCH

  """Gift card has no funds left."""
  GIFT_CARD_DEPLETED

  """Gift card is disabled."""
  GIFT_CARD_DISABLED

  """Gift card is expired."""
  GIFT_CARD_EXPIRED

  """Gift card was not found."""
  GIFT_CARD_NOT_FOUND

  """Gift card cannot be applied to a checkout that contains a gift card."""
  GIFT_CARD_UNUSABLE

  """
  The input value should be greater than or equal to the minimum value allowed.
  """
  GREATER_THAN_OR_EQUAL_TO

  """The input value is invalid."""
  INVALID

  """Input Zip is invalid for country provided."""
  INVALID_FOR_COUNTRY

  """Input Zip is invalid for country and province provided."""
  INVALID_FOR_COUNTRY_AND_PROVINCE

  """Invalid province in country."""
  INVALID_PROVINCE_IN_COUNTRY

  """Invalid region in country."""
  INVALID_REGION_IN_COUNTRY

  """Invalid state in country."""
  INVALID_STATE_IN_COUNTRY

  """The input value should be less than the maximum value allowed."""
  LESS_THAN

  """
  The input value should be less than or equal to the maximum value allowed.
  """
  LESS_THAN_OR_EQUAL_TO

  """Line item was not found in checkout."""
  LINE_ITEM_NOT_FOUND

  """Checkout is locked."""
  LOCKED

  """Missing payment input."""
  MISSING_PAYMENT_INPUT

  """Not enough in stock."""
  NOT_ENOUGH_IN_STOCK

  """Input value is not supported."""
  NOT_SUPPORTED

  """The input value needs to be blank."""
  PRESENT

  """Shipping rate expired."""
  SHIPPING_RATE_EXPIRED

  """The input value is too long."""
  TOO_LONG

  """The amount of the payment does not match the value to be paid."""
  TOTAL_PRICE_MISMATCH

  """Unable to apply discount."""
  UNABLE_TO_APPLY
}

"""Return type for `checkoutGiftCardApply` mutation."""
type CheckoutGiftCardApplyPayload {
  """The updated checkout object."""
  checkout: Checkout!

  """The list of errors that occurred from executing the mutation."""
  checkoutUserErrors: [CheckoutUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `checkoutUserErrors` instead")
}

"""Return type for `checkoutGiftCardRemove` mutation."""
type CheckoutGiftCardRemovePayload {
  """The updated checkout object."""
  checkout: Checkout!

  """The list of errors that occurred from executing the mutation."""
  checkoutUserErrors: [CheckoutUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `checkoutUserErrors` instead")
}

"""Return type for `checkoutGiftCardRemoveV2` mutation."""
type CheckoutGiftCardRemoveV2Payload {
  """The updated checkout object."""
  checkout: Checkout

  """The list of errors that occurred from executing the mutation."""
  checkoutUserErrors: [CheckoutUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `checkoutUserErrors` instead")
}

"""Return type for `checkoutGiftCardsAppend` mutation."""
type CheckoutGiftCardsAppendPayload {
  """The updated checkout object."""
  checkout: Checkout

  """The list of errors that occurred from executing the mutation."""
  checkoutUserErrors: [CheckoutUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `checkoutUserErrors` instead")
}

"""A single line item in the checkout, grouped by variant and attributes."""
type CheckoutLineItem implements Node {
  """
  Extra information in the form of an array of Key-Value pairs about the line item.
  """
  customAttributes: [Attribute!]!

  """
  The discounts that have been allocated onto the checkout line item by discount applications.
  """
  discountAllocations: [DiscountAllocation!]!

  """A globally-unique identifier."""
  id: ID!

  """The quantity of the line item."""
  quantity: Int!

  """Title of the line item. Defaults to the product's title."""
  title: String!

  """Unit price of the line item."""
  unitPrice: MoneyV2

  """Product variant of the line item."""
  variant: ProductVariant
}

"An auto-generated type for paginating through multiple CheckoutLineItems.\n"
type CheckoutLineItemConnection {
  """A list of edges."""
  edges: [CheckoutLineItemEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one CheckoutLineItem and a cursor during pagination.\n"
type CheckoutLineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of CheckoutLineItemEdge."""
  node: CheckoutLineItem!
}

"""Specifies the input fields to create a line item on a checkout."""
input CheckoutLineItemInput {
  """
  Extra information in the form of an array of Key-Value pairs about the line item.
  """
  customAttributes: [AttributeInput!]

  """The quantity of the line item."""
  quantity: Int!

  """The identifier of the product variant for the line item."""
  variantId: ID!
}

"""Specifies the input fields to update a line item on the checkout."""
input CheckoutLineItemUpdateInput {
  """
  Extra information in the form of an array of Key-Value pairs about the line item.
  """
  customAttributes: [AttributeInput!]

  """The identifier of the line item."""
  id: ID

  """The quantity of the line item."""
  quantity: Int

  """The variant identifier of the line item."""
  variantId: ID
}

"""Return type for `checkoutLineItemsAdd` mutation."""
type CheckoutLineItemsAddPayload {
  """The updated checkout object."""
  checkout: Checkout

  """The list of errors that occurred from executing the mutation."""
  checkoutUserErrors: [CheckoutUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `checkoutUserErrors` instead")
}

"""Return type for `checkoutLineItemsRemove` mutation."""
type CheckoutLineItemsRemovePayload {
  """The updated checkout object."""
  checkout: Checkout

  """The list of errors that occurred from executing the mutation."""
  checkoutUserErrors: [CheckoutUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `checkoutUserErrors` instead")
}

"""Return type for `checkoutLineItemsReplace` mutation."""
type CheckoutLineItemsReplacePayload {
  """The updated checkout object."""
  checkout: Checkout

  """The list of errors that occurred from executing the mutation."""
  userErrors: [CheckoutUserError!]!
}

"""Return type for `checkoutLineItemsUpdate` mutation."""
type CheckoutLineItemsUpdatePayload {
  """The updated checkout object."""
  checkout: Checkout

  """The list of errors that occurred from executing the mutation."""
  checkoutUserErrors: [CheckoutUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `checkoutUserErrors` instead")
}

"""Return type for `checkoutShippingAddressUpdate` mutation."""
type CheckoutShippingAddressUpdatePayload {
  """The updated checkout object."""
  checkout: Checkout!

  """The list of errors that occurred from executing the mutation."""
  checkoutUserErrors: [CheckoutUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `checkoutUserErrors` instead")
}

"""Return type for `checkoutShippingAddressUpdateV2` mutation."""
type CheckoutShippingAddressUpdateV2Payload {
  """The updated checkout object."""
  checkout: Checkout

  """The list of errors that occurred from executing the mutation."""
  checkoutUserErrors: [CheckoutUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `checkoutUserErrors` instead")
}

"""Return type for `checkoutShippingLineUpdate` mutation."""
type CheckoutShippingLineUpdatePayload {
  """The updated checkout object."""
  checkout: Checkout

  """The list of errors that occurred from executing the mutation."""
  checkoutUserErrors: [CheckoutUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `checkoutUserErrors` instead")
}

"""
Represents an error that happens during execution of a checkout mutation.
"""
type CheckoutUserError implements DisplayableError {
  """The error code."""
  code: CheckoutErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
A collection represents a grouping of products that a shop owner can create to organize them or make their shops easier to browse.
"""
type Collection implements Node {
  """
  Stripped description of the collection, single line with HTML tags removed.
  """
  description(
    """Truncates string after the given length."""
    truncateAt: Int
  ): String!

  """The description of the collection, complete with HTML formatting."""
  descriptionHtml: HTML!

  "A human-friendly unique string for the collection automatically generated from its title.\nLimit of 255 characters.\n"
  handle: String!

  """A globally-unique identifier."""
  id: ID!

  """Image associated with the collection."""
  image(
    """
    Crops the image according to the specified region. This argument is deprecated: Use `crop` on `Image.transformedSrc` instead.
    """
    crop: CropRegion

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image size multiplier for high-resolution retina displays. Must be between 1 and 3. This argument is deprecated: Use `scale` on `Image.transformedSrc` instead.
    """
    scale: Int = 1
  ): Image

  """List of products in the collection."""
  products(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ProductCollectionSortKeys = COLLECTION_DEFAULT
  ): ProductConnection!

  """The collection’s name. Limit of 255 characters."""
  title: String!

  """The date and time when the collection was last modified."""
  updatedAt: DateTime!
}

"An auto-generated type for paginating through multiple Collections.\n"
type CollectionConnection {
  """A list of edges."""
  edges: [CollectionEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one Collection and a cursor during pagination.\n"
type CollectionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of CollectionEdge."""
  node: Collection!
}

"""The set of valid sort keys for the Collection query."""
enum CollectionSortKeys {
  """Sort by the `id` value."""
  ID

  "During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the\nresults by relevance to the search term(s). When no search query is specified, this sort key is not\ndeterministic and should not be used.\n"
  RELEVANCE

  """Sort by the `title` value."""
  TITLE

  """Sort by the `updated_at` value."""
  UPDATED_AT
}

"""A comment on an article."""
type Comment implements Node {
  """The comment’s author."""
  author: CommentAuthor!

  """Stripped content of the comment, single line with HTML tags removed."""
  content(
    """Truncates string after the given length."""
    truncateAt: Int
  ): String!

  """The content of the comment, complete with HTML formatting."""
  contentHtml: HTML!

  """A globally-unique identifier."""
  id: ID!
}

"""The author of a comment."""
type CommentAuthor {
  """The author's email."""
  email: String!

  """The author’s name."""
  name: String!
}

"An auto-generated type for paginating through multiple Comments.\n"
type CommentConnection {
  """A list of edges."""
  edges: [CommentEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one Comment and a cursor during pagination.\n"
type CommentEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of CommentEdge."""
  node: Comment!
}

"""ISO 3166-1 alpha-2 country codes with some differences."""
enum CountryCode {
  """Ascension Island."""
  AC

  """Andorra."""
  AD

  """United Arab Emirates."""
  AE

  """Afghanistan."""
  AF

  """Antigua & Barbuda."""
  AG

  """Anguilla."""
  AI

  """Albania."""
  AL

  """Armenia."""
  AM

  """Netherlands Antilles."""
  AN

  """Angola."""
  AO

  """Argentina."""
  AR

  """Austria."""
  AT

  """Australia."""
  AU

  """Aruba."""
  AW

  """Åland Islands."""
  AX

  """Azerbaijan."""
  AZ

  """Bosnia & Herzegovina."""
  BA

  """Barbados."""
  BB

  """Bangladesh."""
  BD

  """Belgium."""
  BE

  """Burkina Faso."""
  BF

  """Bulgaria."""
  BG

  """Bahrain."""
  BH

  """Burundi."""
  BI

  """Benin."""
  BJ

  """St. Barthélemy."""
  BL

  """Bermuda."""
  BM

  """Brunei."""
  BN

  """Bolivia."""
  BO

  """Caribbean Netherlands."""
  BQ

  """Brazil."""
  BR

  """Bahamas."""
  BS

  """Bhutan."""
  BT

  """Bouvet Island."""
  BV

  """Botswana."""
  BW

  """Belarus."""
  BY

  """Belize."""
  BZ

  """Canada."""
  CA

  """Cocos (Keeling) Islands."""
  CC

  """Congo - Kinshasa."""
  CD

  """Central African Republic."""
  CF

  """Congo - Brazzaville."""
  CG

  """Switzerland."""
  CH

  """Côte d’Ivoire."""
  CI

  """Cook Islands."""
  CK

  """Chile."""
  CL

  """Cameroon."""
  CM

  """China."""
  CN

  """Colombia."""
  CO

  """Costa Rica."""
  CR

  """Cuba."""
  CU

  """Cape Verde."""
  CV

  """Curaçao."""
  CW

  """Christmas Island."""
  CX

  """Cyprus."""
  CY

  """Czechia."""
  CZ

  """Germany."""
  DE

  """Djibouti."""
  DJ

  """Denmark."""
  DK

  """Dominica."""
  DM

  """Dominican Republic."""
  DO

  """Algeria."""
  DZ

  """Ecuador."""
  EC

  """Estonia."""
  EE

  """Egypt."""
  EG

  """Western Sahara."""
  EH

  """Eritrea."""
  ER

  """Spain."""
  ES

  """Ethiopia."""
  ET

  """Finland."""
  FI

  """Fiji."""
  FJ

  """Falkland Islands."""
  FK

  """Faroe Islands."""
  FO

  """France."""
  FR

  """Gabon."""
  GA

  """United Kingdom."""
  GB

  """Grenada."""
  GD

  """Georgia."""
  GE

  """French Guiana."""
  GF

  """Guernsey."""
  GG

  """Ghana."""
  GH

  """Gibraltar."""
  GI

  """Greenland."""
  GL

  """Gambia."""
  GM

  """Guinea."""
  GN

  """Guadeloupe."""
  GP

  """Equatorial Guinea."""
  GQ

  """Greece."""
  GR

  """South Georgia & South Sandwich Islands."""
  GS

  """Guatemala."""
  GT

  """Guinea-Bissau."""
  GW

  """Guyana."""
  GY

  """Hong Kong SAR."""
  HK

  """Heard & McDonald Islands."""
  HM

  """Honduras."""
  HN

  """Croatia."""
  HR

  """Haiti."""
  HT

  """Hungary."""
  HU

  """Indonesia."""
  ID

  """Ireland."""
  IE

  """Israel."""
  IL

  """Isle of Man."""
  IM

  """India."""
  IN

  """British Indian Ocean Territory."""
  IO

  """Iraq."""
  IQ

  """Iran."""
  IR

  """Iceland."""
  IS

  """Italy."""
  IT

  """Jersey."""
  JE

  """Jamaica."""
  JM

  """Jordan."""
  JO

  """Japan."""
  JP

  """Kenya."""
  KE

  """Kyrgyzstan."""
  KG

  """Cambodia."""
  KH

  """Kiribati."""
  KI

  """Comoros."""
  KM

  """St. Kitts & Nevis."""
  KN

  """North Korea."""
  KP

  """South Korea."""
  KR

  """Kuwait."""
  KW

  """Cayman Islands."""
  KY

  """Kazakhstan."""
  KZ

  """Laos."""
  LA

  """Lebanon."""
  LB

  """St. Lucia."""
  LC

  """Liechtenstein."""
  LI

  """Sri Lanka."""
  LK

  """Liberia."""
  LR

  """Lesotho."""
  LS

  """Lithuania."""
  LT

  """Luxembourg."""
  LU

  """Latvia."""
  LV

  """Libya."""
  LY

  """Morocco."""
  MA

  """Monaco."""
  MC

  """Moldova."""
  MD

  """Montenegro."""
  ME

  """St. Martin."""
  MF

  """Madagascar."""
  MG

  """North Macedonia."""
  MK

  """Mali."""
  ML

  """Myanmar (Burma)."""
  MM

  """Mongolia."""
  MN

  """Macao SAR."""
  MO

  """Martinique."""
  MQ

  """Mauritania."""
  MR

  """Montserrat."""
  MS

  """Malta."""
  MT

  """Mauritius."""
  MU

  """Maldives."""
  MV

  """Malawi."""
  MW

  """Mexico."""
  MX

  """Malaysia."""
  MY

  """Mozambique."""
  MZ

  """Namibia."""
  NA

  """New Caledonia."""
  NC

  """Niger."""
  NE

  """Norfolk Island."""
  NF

  """Nigeria."""
  NG

  """Nicaragua."""
  NI

  """Netherlands."""
  NL

  """Norway."""
  NO

  """Nepal."""
  NP

  """Nauru."""
  NR

  """Niue."""
  NU

  """New Zealand."""
  NZ

  """Oman."""
  OM

  """Panama."""
  PA

  """Peru."""
  PE

  """French Polynesia."""
  PF

  """Papua New Guinea."""
  PG

  """Philippines."""
  PH

  """Pakistan."""
  PK

  """Poland."""
  PL

  """St. Pierre & Miquelon."""
  PM

  """Pitcairn Islands."""
  PN

  """Palestinian Territories."""
  PS

  """Portugal."""
  PT

  """Paraguay."""
  PY

  """Qatar."""
  QA

  """Réunion."""
  RE

  """Romania."""
  RO

  """Serbia."""
  RS

  """Russia."""
  RU

  """Rwanda."""
  RW

  """Saudi Arabia."""
  SA

  """Solomon Islands."""
  SB

  """Seychelles."""
  SC

  """Sudan."""
  SD

  """Sweden."""
  SE

  """Singapore."""
  SG

  """St. Helena."""
  SH

  """Slovenia."""
  SI

  """Svalbard & Jan Mayen."""
  SJ

  """Slovakia."""
  SK

  """Sierra Leone."""
  SL

  """San Marino."""
  SM

  """Senegal."""
  SN

  """Somalia."""
  SO

  """Suriname."""
  SR

  """South Sudan."""
  SS

  """São Tomé & Príncipe."""
  ST

  """El Salvador."""
  SV

  """Sint Maarten."""
  SX

  """Syria."""
  SY

  """Eswatini."""
  SZ

  """Tristan da Cunha."""
  TA

  """Turks & Caicos Islands."""
  TC

  """Chad."""
  TD

  """French Southern Territories."""
  TF

  """Togo."""
  TG

  """Thailand."""
  TH

  """Tajikistan."""
  TJ

  """Tokelau."""
  TK

  """Timor-Leste."""
  TL

  """Turkmenistan."""
  TM

  """Tunisia."""
  TN

  """Tonga."""
  TO

  """Turkey."""
  TR

  """Trinidad & Tobago."""
  TT

  """Tuvalu."""
  TV

  """Taiwan."""
  TW

  """Tanzania."""
  TZ

  """Ukraine."""
  UA

  """Uganda."""
  UG

  """U.S. Outlying Islands."""
  UM

  """United States."""
  US

  """Uruguay."""
  UY

  """Uzbekistan."""
  UZ

  """Vatican City."""
  VA

  """St. Vincent & Grenadines."""
  VC

  """Venezuela."""
  VE

  """British Virgin Islands."""
  VG

  """Vietnam."""
  VN

  """Vanuatu."""
  VU

  """Wallis & Futuna."""
  WF

  """Samoa."""
  WS

  """Kosovo."""
  XK

  """Yemen."""
  YE

  """Mayotte."""
  YT

  """South Africa."""
  ZA

  """Zambia."""
  ZM

  """Zimbabwe."""
  ZW

  """Unknown Region."""
  ZZ
}

"""Credit card information used for a payment."""
type CreditCard {
  """The brand of the credit card."""
  brand: String

  """The expiry month of the credit card."""
  expiryMonth: Int

  """The expiry year of the credit card."""
  expiryYear: Int

  """The credit card's BIN number."""
  firstDigits: String

  """The first name of the card holder."""
  firstName: String

  """The last 4 digits of the credit card."""
  lastDigits: String

  """The last name of the card holder."""
  lastName: String

  """The masked credit card number with only the last 4 digits displayed."""
  maskedNumber: String
}

"Specifies the fields required to complete a checkout with\na Shopify vaulted credit card payment.\n"
input CreditCardPaymentInput {
  """The amount of the payment."""
  amount: Money!

  """The billing address for the payment."""
  billingAddress: MailingAddressInput!

  """
  A unique client generated key used to avoid duplicate charges. When a duplicate payment is found, the original is returned instead of creating a new one. For more information, refer to [Idempotent requests](https://shopify.dev/concepts/about-apis/idempotent-requests).
  """
  idempotencyKey: String!

  """Executes the payment in test mode if possible. Defaults to `false`."""
  test: Boolean = false

  """The ID returned by Shopify's Card Vault."""
  vaultId: String!
}

"Specifies the fields required to complete a checkout with\na Shopify vaulted credit card payment.\n"
input CreditCardPaymentInputV2 {
  """The billing address for the payment."""
  billingAddress: MailingAddressInput!

  """
  A unique client generated key used to avoid duplicate charges. When a duplicate payment is found, the original is returned instead of creating a new one. For more information, refer to [Idempotent requests](https://shopify.dev/concepts/about-apis/idempotent-requests).
  """
  idempotencyKey: String!

  """The amount and currency of the payment."""
  paymentAmount: MoneyInput!

  """Executes the payment in test mode if possible. Defaults to `false`."""
  test: Boolean = false

  """The ID returned by Shopify's Card Vault."""
  vaultId: String!
}

"""The part of the image that should remain after cropping."""
enum CropRegion {
  """Keep the bottom of the image."""
  BOTTOM

  """Keep the center of the image."""
  CENTER

  """Keep the left of the image."""
  LEFT

  """Keep the right of the image."""
  RIGHT

  """Keep the top of the image."""
  TOP
}

"The three-letter currency codes that represent the world currencies used in stores. These include standard ISO 4217 codes, legacy codes,\nand non-standard codes.\n"
enum CurrencyCode {
  """United Arab Emirates Dirham (AED)."""
  AED

  """Afghan Afghani (AFN)."""
  AFN

  """Albanian Lek (ALL)."""
  ALL

  """Armenian Dram (AMD)."""
  AMD

  """Netherlands Antillean Guilder."""
  ANG

  """Angolan Kwanza (AOA)."""
  AOA

  """Argentine Pesos (ARS)."""
  ARS

  """Australian Dollars (AUD)."""
  AUD

  """Aruban Florin (AWG)."""
  AWG

  """Azerbaijani Manat (AZN)."""
  AZN

  """Bosnia and Herzegovina Convertible Mark (BAM)."""
  BAM

  """Barbadian Dollar (BBD)."""
  BBD

  """Bangladesh Taka (BDT)."""
  BDT

  """Bulgarian Lev (BGN)."""
  BGN

  """Bahraini Dinar (BHD)."""
  BHD

  """Burundian Franc (BIF)."""
  BIF

  """Bermudian Dollar (BMD)."""
  BMD

  """Brunei Dollar (BND)."""
  BND

  """Bolivian Boliviano (BOB)."""
  BOB

  """Brazilian Real (BRL)."""
  BRL

  """Bahamian Dollar (BSD)."""
  BSD

  """Bhutanese Ngultrum (BTN)."""
  BTN

  """Botswana Pula (BWP)."""
  BWP

  """Belarusian Ruble (BYN)."""
  BYN

  """Belarusian Ruble (BYR)."""
  BYR

  """Belize Dollar (BZD)."""
  BZD

  """Canadian Dollars (CAD)."""
  CAD

  """Congolese franc (CDF)."""
  CDF

  """Swiss Francs (CHF)."""
  CHF

  """Chilean Peso (CLP)."""
  CLP

  """Chinese Yuan Renminbi (CNY)."""
  CNY

  """Colombian Peso (COP)."""
  COP

  """Costa Rican Colones (CRC)."""
  CRC

  """Cape Verdean escudo (CVE)."""
  CVE

  """Czech Koruny (CZK)."""
  CZK

  """Djiboutian Franc (DJF)."""
  DJF

  """Danish Kroner (DKK)."""
  DKK

  """Dominican Peso (DOP)."""
  DOP

  """Algerian Dinar (DZD)."""
  DZD

  """Egyptian Pound (EGP)."""
  EGP

  """Eritrean Nakfa (ERN)."""
  ERN

  """Ethiopian Birr (ETB)."""
  ETB

  """Euro (EUR)."""
  EUR

  """Fijian Dollars (FJD)."""
  FJD

  """Falkland Islands Pounds (FKP)."""
  FKP

  """United Kingdom Pounds (GBP)."""
  GBP

  """Georgian Lari (GEL)."""
  GEL

  """Ghanaian Cedi (GHS)."""
  GHS

  """Gibraltar Pounds (GIP)."""
  GIP

  """Gambian Dalasi (GMD)."""
  GMD

  """Guinean Franc (GNF)."""
  GNF

  """Guatemalan Quetzal (GTQ)."""
  GTQ

  """Guyanese Dollar (GYD)."""
  GYD

  """Hong Kong Dollars (HKD)."""
  HKD

  """Honduran Lempira (HNL)."""
  HNL

  """Croatian Kuna (HRK)."""
  HRK

  """Haitian Gourde (HTG)."""
  HTG

  """Hungarian Forint (HUF)."""
  HUF

  """Indonesian Rupiah (IDR)."""
  IDR

  """Israeli New Shekel (NIS)."""
  ILS

  """Indian Rupees (INR)."""
  INR

  """Iraqi Dinar (IQD)."""
  IQD

  """Iranian Rial (IRR)."""
  IRR

  """Icelandic Kronur (ISK)."""
  ISK

  """Jersey Pound."""
  JEP

  """Jamaican Dollars (JMD)."""
  JMD

  """Jordanian Dinar (JOD)."""
  JOD

  """Japanese Yen (JPY)."""
  JPY

  """Kenyan Shilling (KES)."""
  KES

  """Kyrgyzstani Som (KGS)."""
  KGS

  """Cambodian Riel."""
  KHR

  """Kiribati Dollar (KID)."""
  KID

  """Comorian Franc (KMF)."""
  KMF

  """South Korean Won (KRW)."""
  KRW

  """Kuwaiti Dinar (KWD)."""
  KWD

  """Cayman Dollars (KYD)."""
  KYD

  """Kazakhstani Tenge (KZT)."""
  KZT

  """Laotian Kip (LAK)."""
  LAK

  """Lebanese Pounds (LBP)."""
  LBP

  """Sri Lankan Rupees (LKR)."""
  LKR

  """Liberian Dollar (LRD)."""
  LRD

  """Lesotho Loti (LSL)."""
  LSL

  """Lithuanian Litai (LTL)."""
  LTL

  """Latvian Lati (LVL)."""
  LVL

  """Libyan Dinar (LYD)."""
  LYD

  """Moroccan Dirham."""
  MAD

  """Moldovan Leu (MDL)."""
  MDL

  """Malagasy Ariary (MGA)."""
  MGA

  """Macedonia Denar (MKD)."""
  MKD

  """Burmese Kyat (MMK)."""
  MMK

  """Mongolian Tugrik."""
  MNT

  """Macanese Pataca (MOP)."""
  MOP

  """Mauritanian Ouguiya (MRU)."""
  MRU

  """Mauritian Rupee (MUR)."""
  MUR

  """Maldivian Rufiyaa (MVR)."""
  MVR

  """Malawian Kwacha (MWK)."""
  MWK

  """Mexican Pesos (MXN)."""
  MXN

  """Malaysian Ringgits (MYR)."""
  MYR

  """Mozambican Metical."""
  MZN

  """Namibian Dollar."""
  NAD

  """Nigerian Naira (NGN)."""
  NGN

  """Nicaraguan Córdoba (NIO)."""
  NIO

  """Norwegian Kroner (NOK)."""
  NOK

  """Nepalese Rupee (NPR)."""
  NPR

  """New Zealand Dollars (NZD)."""
  NZD

  """Omani Rial (OMR)."""
  OMR

  """Panamian Balboa (PAB)."""
  PAB

  """Peruvian Nuevo Sol (PEN)."""
  PEN

  """Papua New Guinean Kina (PGK)."""
  PGK

  """Philippine Peso (PHP)."""
  PHP

  """Pakistani Rupee (PKR)."""
  PKR

  """Polish Zlotych (PLN)."""
  PLN

  """Paraguayan Guarani (PYG)."""
  PYG

  """Qatari Rial (QAR)."""
  QAR

  """Romanian Lei (RON)."""
  RON

  """Serbian dinar (RSD)."""
  RSD

  """Russian Rubles (RUB)."""
  RUB

  """Rwandan Franc (RWF)."""
  RWF

  """Saudi Riyal (SAR)."""
  SAR

  """Solomon Islands Dollar (SBD)."""
  SBD

  """Seychellois Rupee (SCR)."""
  SCR

  """Sudanese Pound (SDG)."""
  SDG

  """Swedish Kronor (SEK)."""
  SEK

  """Singapore Dollars (SGD)."""
  SGD

  """Saint Helena Pounds (SHP)."""
  SHP

  """Sierra Leonean Leone (SLL)."""
  SLL

  """Somali Shilling (SOS)."""
  SOS

  """Surinamese Dollar (SRD)."""
  SRD

  """South Sudanese Pound (SSP)."""
  SSP

  """Sao Tome And Principe Dobra (STD)."""
  STD

  """Syrian Pound (SYP)."""
  SYP

  """Swazi Lilangeni (SZL)."""
  SZL

  """Thai baht (THB)."""
  THB

  """Tajikistani Somoni (TJS)."""
  TJS

  """Turkmenistani Manat (TMT)."""
  TMT

  """Tunisian Dinar (TND)."""
  TND

  """Tongan Pa'anga (TOP)."""
  TOP

  """Turkish Lira (TRY)."""
  TRY

  """Trinidad and Tobago Dollars (TTD)."""
  TTD

  """Taiwan Dollars (TWD)."""
  TWD

  """Tanzanian Shilling (TZS)."""
  TZS

  """Ukrainian Hryvnia (UAH)."""
  UAH

  """Ugandan Shilling (UGX)."""
  UGX

  """United States Dollars (USD)."""
  USD

  """Uruguayan Pesos (UYU)."""
  UYU

  """Uzbekistan som (UZS)."""
  UZS

  """Venezuelan Bolivares (VEF)."""
  VEF

  """Venezuelan Bolivares (VES)."""
  VES

  """Vietnamese đồng (VND)."""
  VND

  """Vanuatu Vatu (VUV)."""
  VUV

  """Samoan Tala (WST)."""
  WST

  """Central African CFA Franc (XAF)."""
  XAF

  """East Caribbean Dollar (XCD)."""
  XCD

  """West African CFA franc (XOF)."""
  XOF

  """CFP Franc (XPF)."""
  XPF

  """Yemeni Rial (YER)."""
  YER

  """South African Rand (ZAR)."""
  ZAR

  """Zambian Kwacha (ZMW)."""
  ZMW
}

"""
A customer represents a customer account with the shop. Customer accounts store contact information for the customer, saving logged-in customers the trouble of having to provide it at every checkout.
"""
type Customer {
  """
  Indicates whether the customer has consented to be sent marketing material via email.
  """
  acceptsMarketing: Boolean!

  """A list of addresses for the customer."""
  addresses(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): MailingAddressConnection!

  """The date and time when the customer was created."""
  createdAt: DateTime!

  """The customer’s default address."""
  defaultAddress: MailingAddress

  """The customer’s name, email or phone number."""
  displayName: String!

  """The customer’s email address."""
  email: String

  """The customer’s first name."""
  firstName: String

  """A unique identifier for the customer."""
  id: ID!

  """The customer's most recently updated, incomplete checkout."""
  lastIncompleteCheckout: Checkout

  """The customer’s last name."""
  lastName: String

  """The orders associated with the customer."""
  orders(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `processed_at`\n\nSee the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: OrderSortKeys = ID
  ): OrderConnection!

  """The customer’s phone number."""
  phone: String

  "A comma separated list of tags that have been added to the customer.\nAdditional access scope required: unauthenticated_read_customer_tags.\n"
  tags: [String!]!

  """The date and time when the customer information was updated."""
  updatedAt: DateTime!
}

"""
A CustomerAccessToken represents the unique token required to make modifications to the customer object.
"""
type CustomerAccessToken {
  """The customer’s access token."""
  accessToken: String!

  """The date and time when the customer access token expires."""
  expiresAt: DateTime!
}

"""Specifies the input fields required to create a customer access token."""
input CustomerAccessTokenCreateInput {
  """The email associated to the customer."""
  email: String!

  """The login password to be used by the customer."""
  password: String!
}

"""Return type for `customerAccessTokenCreate` mutation."""
type CustomerAccessTokenCreatePayload {
  """The newly created customer access token object."""
  customerAccessToken: CustomerAccessToken

  """The list of errors that occurred from executing the mutation."""
  customerUserErrors: [CustomerUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `customerUserErrors` instead")
}

"""Return type for `customerAccessTokenCreateWithMultipass` mutation."""
type CustomerAccessTokenCreateWithMultipassPayload {
  """An access token object associated with the customer."""
  customerAccessToken: CustomerAccessToken

  """The list of errors that occurred from executing the mutation."""
  customerUserErrors: [CustomerUserError!]!
}

"""Return type for `customerAccessTokenDelete` mutation."""
type CustomerAccessTokenDeletePayload {
  """The destroyed access token."""
  deletedAccessToken: String

  """ID of the destroyed customer access token."""
  deletedCustomerAccessTokenId: String

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `customerAccessTokenRenew` mutation."""
type CustomerAccessTokenRenewPayload {
  """The renewed customer access token object."""
  customerAccessToken: CustomerAccessToken

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `customerActivateByUrl` mutation."""
type CustomerActivateByUrlPayload {
  """The customer that was activated."""
  customer: Customer

  """A new customer access token for the customer."""
  customerAccessToken: CustomerAccessToken

  """The list of errors that occurred from executing the mutation."""
  customerUserErrors: [CustomerUserError!]!
}

"""Specifies the input fields required to activate a customer."""
input CustomerActivateInput {
  """The activation token required to activate the customer."""
  activationToken: String!

  """New password that will be set during activation."""
  password: String!
}

"""Return type for `customerActivate` mutation."""
type CustomerActivatePayload {
  """The customer object."""
  customer: Customer

  """A newly created customer access token object for the customer."""
  customerAccessToken: CustomerAccessToken

  """The list of errors that occurred from executing the mutation."""
  customerUserErrors: [CustomerUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `customerUserErrors` instead")
}

"""Return type for `customerAddressCreate` mutation."""
type CustomerAddressCreatePayload {
  """The new customer address object."""
  customerAddress: MailingAddress

  """The list of errors that occurred from executing the mutation."""
  customerUserErrors: [CustomerUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `customerUserErrors` instead")
}

"""Return type for `customerAddressDelete` mutation."""
type CustomerAddressDeletePayload {
  """The list of errors that occurred from executing the mutation."""
  customerUserErrors: [CustomerUserError!]!

  """ID of the deleted customer address."""
  deletedCustomerAddressId: String

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `customerUserErrors` instead")
}

"""Return type for `customerAddressUpdate` mutation."""
type CustomerAddressUpdatePayload {
  """The customer’s updated mailing address."""
  customerAddress: MailingAddress

  """The list of errors that occurred from executing the mutation."""
  customerUserErrors: [CustomerUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `customerUserErrors` instead")
}

"""The fields required to create a new customer."""
input CustomerCreateInput {
  """
  Indicates whether the customer has consented to be sent marketing material via email.
  """
  acceptsMarketing: Boolean

  """The customer’s email."""
  email: String!

  """The customer’s first name."""
  firstName: String

  """The customer’s last name."""
  lastName: String

  """The login password used by the customer."""
  password: String!

  "A unique phone number for the customer.\n\nFormatted using E.164 standard. For example, _+16135551111_.\n"
  phone: String
}

"""Return type for `customerCreate` mutation."""
type CustomerCreatePayload {
  """The created customer object."""
  customer: Customer

  """The list of errors that occurred from executing the mutation."""
  customerUserErrors: [CustomerUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `customerUserErrors` instead")
}

"""Return type for `customerDefaultAddressUpdate` mutation."""
type CustomerDefaultAddressUpdatePayload {
  """The updated customer object."""
  customer: Customer

  """The list of errors that occurred from executing the mutation."""
  customerUserErrors: [CustomerUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `customerUserErrors` instead")
}

"""Possible error codes that can be returned by `CustomerUserError`."""
enum CustomerErrorCode {
  """Customer already enabled."""
  ALREADY_ENABLED

  """Input email contains an invalid domain name."""
  BAD_DOMAIN

  """The input value is blank."""
  BLANK

  """Input contains HTML tags."""
  CONTAINS_HTML_TAGS

  """Input contains URL."""
  CONTAINS_URL

  """Customer is disabled."""
  CUSTOMER_DISABLED

  """The input value is invalid."""
  INVALID

  """Multipass token is not valid."""
  INVALID_MULTIPASS_REQUEST

  """Address does not exist."""
  NOT_FOUND

  """Input password starts or ends with whitespace."""
  PASSWORD_STARTS_OR_ENDS_WITH_WHITESPACE

  """The input value is already taken."""
  TAKEN

  """Invalid activation token."""
  TOKEN_INVALID

  """The input value is too long."""
  TOO_LONG

  """The input value is too short."""
  TOO_SHORT

  """Unidentified customer."""
  UNIDENTIFIED_CUSTOMER
}

"""Return type for `customerRecover` mutation."""
type CustomerRecoverPayload {
  """The list of errors that occurred from executing the mutation."""
  customerUserErrors: [CustomerUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `customerUserErrors` instead")
}

"""Return type for `customerResetByUrl` mutation."""
type CustomerResetByUrlPayload {
  """The customer object which was reset."""
  customer: Customer

  """A newly created customer access token object for the customer."""
  customerAccessToken: CustomerAccessToken

  """The list of errors that occurred from executing the mutation."""
  customerUserErrors: [CustomerUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `customerUserErrors` instead")
}

"""Specifies the fields required to reset a customer’s password."""
input CustomerResetInput {
  """New password that will be set as part of the reset password process."""
  password: String!

  """The reset token required to reset the customer’s password."""
  resetToken: String!
}

"""Return type for `customerReset` mutation."""
type CustomerResetPayload {
  """The customer object which was reset."""
  customer: Customer

  """A newly created customer access token object for the customer."""
  customerAccessToken: CustomerAccessToken

  """The list of errors that occurred from executing the mutation."""
  customerUserErrors: [CustomerUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `customerUserErrors` instead")
}

"""Specifies the fields required to update the Customer information."""
input CustomerUpdateInput {
  """
  Indicates whether the customer has consented to be sent marketing material via email.
  """
  acceptsMarketing: Boolean

  """The customer’s email."""
  email: String

  """The customer’s first name."""
  firstName: String

  """The customer’s last name."""
  lastName: String

  """The login password used by the customer."""
  password: String

  "A unique phone number for the customer.\n\nFormatted using E.164 standard. For example, _+16135551111_. To remove the phone number, specify `null`.\n"
  phone: String
}

"""Return type for `customerUpdate` mutation."""
type CustomerUpdatePayload {
  """The updated customer object."""
  customer: Customer

  "The newly created customer access token. If the customer's password is updated, all previous access tokens\n(including the one used to perform this mutation) become invalid, and a new token is generated.\n"
  customerAccessToken: CustomerAccessToken

  """The list of errors that occurred from executing the mutation."""
  customerUserErrors: [CustomerUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `customerUserErrors` instead")
}

"""
Represents an error that happens during execution of a customer mutation.
"""
type CustomerUserError implements DisplayableError {
  """The error code."""
  code: CustomerErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"Represents an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)-encoded date and time string.\nFor example, 3:30 pm on September 7, 2019 in the time zone of UTC (Coordinated Universal Time) is\nrepresented as `\"2019-09-07T15:50:00Z`\".\n"
scalar DateTime

"A signed decimal number, which supports arbitrary precision and is serialized as a string.\n\nExample values: `\"29.99\"`, `\"29.999\"`.\n"
scalar Decimal

"""
Digital wallet, such as Apple Pay, which can be used for accelerated checkouts.
"""
enum DigitalWallet {
  """Android Pay."""
  ANDROID_PAY

  """Apple Pay."""
  APPLE_PAY

  """Google Pay."""
  GOOGLE_PAY

  """Shopify Pay."""
  SHOPIFY_PAY
}

"An amount discounting the line that has been allocated by a discount.\n"
type DiscountAllocation {
  """Amount of discount allocated."""
  allocatedAmount: MoneyV2!

  """The discount this allocated amount originated from."""
  discountApplication: DiscountApplication!
}

"Discount applications capture the intentions of a discount source at\nthe time of application.\n"
interface DiscountApplication {
  """
  The method by which the discount's value is allocated to its entitled items.
  """
  allocationMethod: DiscountApplicationAllocationMethod!

  """Which lines of targetType that the discount is allocated over."""
  targetSelection: DiscountApplicationTargetSelection!

  """The type of line that the discount is applicable towards."""
  targetType: DiscountApplicationTargetType!

  """The value of the discount application."""
  value: PricingValue!
}

"""
The method by which the discount's value is allocated onto its entitled lines.
"""
enum DiscountApplicationAllocationMethod {
  """The value is spread across all entitled lines."""
  ACROSS

  """The value is applied onto every entitled line."""
  EACH

  """The value is specifically applied onto a particular line."""
  ONE
}

"An auto-generated type for paginating through multiple DiscountApplications.\n"
type DiscountApplicationConnection {
  """A list of edges."""
  edges: [DiscountApplicationEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one DiscountApplication and a cursor during pagination.\n"
type DiscountApplicationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of DiscountApplicationEdge."""
  node: DiscountApplication!
}

"Which lines on the order that the discount is allocated over, of the type\ndefined by the Discount Application's target_type.\n"
enum DiscountApplicationTargetSelection {
  """The discount is allocated onto all the lines."""
  ALL

  """The discount is allocated onto only the lines it is entitled for."""
  ENTITLED

  """The discount is allocated onto explicitly chosen lines."""
  EXPLICIT
}

"The type of line (i.e. line item or shipping line) on an order that the discount is applicable towards.\n"
enum DiscountApplicationTargetType {
  """The discount applies onto line items."""
  LINE_ITEM

  """The discount applies onto shipping lines."""
  SHIPPING_LINE
}

"Discount code applications capture the intentions of a discount code at\nthe time that it is applied.\n"
type DiscountCodeApplication implements DiscountApplication {
  """
  The method by which the discount's value is allocated to its entitled items.
  """
  allocationMethod: DiscountApplicationAllocationMethod!

  """Specifies whether the discount code was applied successfully."""
  applicable: Boolean!

  """
  The string identifying the discount code that was used at the time of application.
  """
  code: String!

  """Which lines of targetType that the discount is allocated over."""
  targetSelection: DiscountApplicationTargetSelection!

  """The type of line that the discount is applicable towards."""
  targetType: DiscountApplicationTargetType!

  """The value of the discount application."""
  value: PricingValue!
}

"""Represents an error in the input of a mutation."""
interface DisplayableError {
  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""Represents a web address."""
type Domain {
  """The host name of the domain (eg: `example.com`)."""
  host: String!

  """Whether SSL is enabled or not."""
  sslEnabled: Boolean!

  """The URL of the domain (eg: `https://example.com`)."""
  url: URL!
}

"""Represents a video hosted outside of Shopify."""
type ExternalVideo implements Media & Node {
  """A word or phrase to share the nature or contents of a media."""
  alt: String

  """The URL."""
  embeddedUrl: URL! @deprecated(reason: "Use `originUrl` instead")

  """The host of the external video."""
  host: MediaHost!

  """A globally-unique identifier."""
  id: ID!

  """The media content type."""
  mediaContentType: MediaContentType!

  """The preview image for the media."""
  previewImage: Image
}

"""Represents a single fulfillment in an order."""
type Fulfillment {
  """List of the fulfillment's line items."""
  fulfillmentLineItems(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): FulfillmentLineItemConnection!

  """The name of the tracking company."""
  trackingCompany: String

  "Tracking information associated with the fulfillment,\nsuch as the tracking number and tracking URL.\n"
  trackingInfo(
    """Truncate the array result to this size."""
    first: Int
  ): [FulfillmentTrackingInfo!]!
}

"""
Represents a single line item in a fulfillment. There is at most one fulfillment line item for each order line item.
"""
type FulfillmentLineItem {
  """The associated order's line item."""
  lineItem: OrderLineItem!

  """The amount fulfilled in this fulfillment."""
  quantity: Int!
}

"An auto-generated type for paginating through multiple FulfillmentLineItems.\n"
type FulfillmentLineItemConnection {
  """A list of edges."""
  edges: [FulfillmentLineItemEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one FulfillmentLineItem and a cursor during pagination.\n"
type FulfillmentLineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of FulfillmentLineItemEdge."""
  node: FulfillmentLineItem!
}

"""Tracking information associated with the fulfillment."""
type FulfillmentTrackingInfo {
  """The tracking number of the fulfillment."""
  number: String

  """The URL to track the fulfillment."""
  url: URL
}

"A string containing HTML code. Refer to the [HTML spec](https://html.spec.whatwg.org/#elements-3) for a\ncomplete list of HTML elements.\n\nExample value: `\"<p>Grey cotton knit sweater.</p>\"`.\n"
scalar HTML

"""
Represents information about the metafields associated to the specified resource.
"""
interface HasMetafields {
  """Returns a metafield found by namespace and key."""
  metafield(
    """Identifier for the metafield (maximum of 30 characters)."""
    key: String!

    """Container for a set of metafields (maximum of 20 characters)."""
    namespace: String!
  ): Metafield

  """A paginated list of metafields associated with the resource."""
  metafields(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Container for a set of metafields (maximum of 20 characters)."""
    namespace: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): MetafieldConnection! @deprecated(reason: "The `metafields` field will be removed in the future in favor of using [aliases](https://graphql.org/learn/queries/#aliases) with the `metafield` field.\n")
}

"""Represents an image resource."""
type Image {
  """A word or phrase to share the nature or contents of an image."""
  altText: String

  """
  The original height of the image in pixels. Returns `null` if the image is not hosted by Shopify.
  """
  height: Int

  """A unique identifier for the image."""
  id: ID

  "The location of the original image as a URL.\n\nIf there are any existing transformations in the original source URL, they will remain and not be stripped.\n"
  originalSrc: URL! @deprecated(reason: "Use `url` instead")

  """The location of the image as a URL."""
  src: URL! @deprecated(reason: "Use `url` instead")

  "The location of the transformed image as a URL.\n\nAll transformation arguments are considered \"best-effort\". If they can be applied to an image, they will be.\nOtherwise any transformations which an image type does not support will be ignored.\n"
  transformedSrc(
    """Crops the image according to the specified region."""
    crop: CropRegion

    """Image height in pixels between 1 and 5760."""
    maxHeight: Int

    """Image width in pixels between 1 and 5760."""
    maxWidth: Int

    """
    Best effort conversion of image into content type (SVG -> PNG, Anything -> JPG, Anything -> WEBP are supported).
    """
    preferredContentType: ImageContentType

    """
    Image size multiplier for high-resolution retina displays. Must be between 1 and 3.
    """
    scale: Int = 1
  ): URL! @deprecated(reason: "Use `url(transform:)` instead")

  """
  The original width of the image in pixels. Returns `null` if the image is not hosted by Shopify.
  """
  width: Int
}

"An auto-generated type for paginating through multiple Images.\n"
type ImageConnection {
  """A list of edges."""
  edges: [ImageEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""List of supported image content types."""
enum ImageContentType {
  """A JPG image."""
  JPG

  """A PNG image."""
  PNG

  """A WEBP image."""
  WEBP
}

"An auto-generated type which holds one Image and a cursor during pagination.\n"
type ImageEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ImageEdge."""
  node: Image!
}

"""Represents a mailing address for customers and shipping."""
type MailingAddress implements Node {
  "The first line of the address. Typically the street address or PO Box number.\n"
  address1: String

  "The second line of the address. Typically the number of the apartment, suite, or unit.\n"
  address2: String

  "The name of the city, district, village, or town.\n"
  city: String

  "The name of the customer's company or organization.\n"
  company: String

  "The name of the country.\n"
  country: String

  "The two-letter code for the country of the address.\n\nFor example, US.\n"
  countryCode: String @deprecated(reason: "Use `countryCodeV2` instead")

  "The two-letter code for the country of the address.\n\nFor example, US.\n"
  countryCodeV2: CountryCode

  """The first name of the customer."""
  firstName: String

  """
  A formatted version of the address, customized by the provided arguments.
  """
  formatted(
    """Whether to include the customer's company in the formatted address."""
    withCompany: Boolean = true

    """Whether to include the customer's name in the formatted address."""
    withName: Boolean = false
  ): [String!]!

  """A comma-separated list of the values for city, province, and country."""
  formattedArea: String

  """A globally-unique identifier."""
  id: ID!

  """The last name of the customer."""
  lastName: String

  """The latitude coordinate of the customer address."""
  latitude: Float

  """The longitude coordinate of the customer address."""
  longitude: Float

  "The full name of the customer, based on firstName and lastName.\n"
  name: String

  "A unique phone number for the customer.\n\nFormatted using E.164 standard. For example, _+16135551111_.\n"
  phone: String

  """The region of the address, such as the province, state, or district."""
  province: String

  "The two-letter code for the region.\n\nFor example, ON.\n"
  provinceCode: String

  """The zip or postal code of the address."""
  zip: String
}

"An auto-generated type for paginating through multiple MailingAddresses.\n"
type MailingAddressConnection {
  """A list of edges."""
  edges: [MailingAddressEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one MailingAddress and a cursor during pagination.\n"
type MailingAddressEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of MailingAddressEdge."""
  node: MailingAddress!
}

"""Specifies the fields accepted to create or update a mailing address."""
input MailingAddressInput {
  "The first line of the address. Typically the street address or PO Box number.\n"
  address1: String

  "The second line of the address. Typically the number of the apartment, suite, or unit.\n"
  address2: String

  "The name of the city, district, village, or town.\n"
  city: String

  "The name of the customer's company or organization.\n"
  company: String

  """The name of the country."""
  country: String

  """The first name of the customer."""
  firstName: String

  """The last name of the customer."""
  lastName: String

  "A unique phone number for the customer.\n\nFormatted using E.164 standard. For example, _+16135551111_.\n"
  phone: String

  """The region of the address, such as the province, state, or district."""
  province: String

  """The zip or postal code of the address."""
  zip: String
}

"Manual discount applications capture the intentions of a discount that was manually created.\n"
type ManualDiscountApplication implements DiscountApplication {
  """
  The method by which the discount's value is allocated to its entitled items.
  """
  allocationMethod: DiscountApplicationAllocationMethod!

  """The description of the application."""
  description: String

  """Which lines of targetType that the discount is allocated over."""
  targetSelection: DiscountApplicationTargetSelection!

  """The type of line that the discount is applicable towards."""
  targetType: DiscountApplicationTargetType!

  """The title of the application."""
  title: String!

  """The value of the discount application."""
  value: PricingValue!
}

"""Represents a media interface."""
interface Media {
  """A word or phrase to share the nature or contents of a media."""
  alt: String

  """The media content type."""
  mediaContentType: MediaContentType!

  """The preview image for the media."""
  previewImage: Image
}

"An auto-generated type for paginating through multiple Media.\n"
type MediaConnection {
  """A list of edges."""
  edges: [MediaEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""The possible content types for a media object."""
enum MediaContentType {
  """An externally hosted video."""
  EXTERNAL_VIDEO

  """A Shopify hosted image."""
  IMAGE

  """A 3d model."""
  MODEL_3D

  """A Shopify hosted video."""
  VIDEO
}

"An auto-generated type which holds one Media and a cursor during pagination.\n"
type MediaEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of MediaEdge."""
  node: Media!
}

"""Host for a Media Resource."""
enum MediaHost {
  """Host for Vimeo embedded videos."""
  VIMEO

  """Host for YouTube embedded videos."""
  YOUTUBE
}

"""Represents a Shopify hosted image."""
type MediaImage implements Media & Node {
  """A word or phrase to share the nature or contents of a media."""
  alt: String

  """A globally-unique identifier."""
  id: ID!

  """The image for the media."""
  image: Image

  """The media content type."""
  mediaContentType: MediaContentType!

  """The preview image for the media."""
  previewImage: Image
}

"Metafields represent custom metadata attached to a resource. Metafields can be sorted into namespaces and are\ncomprised of keys, values, and value types.\n"
type Metafield implements Node {
  """The date and time when the storefront metafield was created."""
  createdAt: DateTime!

  """The description of a metafield."""
  description: String

  """A globally-unique identifier."""
  id: ID!

  """The key name for a metafield."""
  key: String!

  """The namespace for a metafield."""
  namespace: String!

  """The parent object that the metafield belongs to."""
  parentResource: MetafieldParentResource!

  """The date and time when the storefront metafield was updated."""
  updatedAt: DateTime!

  """The value of a metafield."""
  value: String!

  """Represents the metafield value type."""
  valueType: MetafieldValueType! @deprecated(reason: "`valueType` is deprecated and replaced by `type` in API version 2021-07.")
}

"An auto-generated type for paginating through multiple Metafields.\n"
type MetafieldConnection {
  """A list of edges."""
  edges: [MetafieldEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one Metafield and a cursor during pagination.\n"
type MetafieldEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of MetafieldEdge."""
  node: Metafield!
}

"""A resource that the metafield belongs to."""
union MetafieldParentResource = Product | ProductVariant

"""Metafield value types."""
enum MetafieldValueType {
  """A boolean metafield."""
  BOOLEAN

  """An integer metafield."""
  INTEGER

  """A json string metafield."""
  JSON_STRING

  """A string metafield."""
  STRING
}

"""Represents a Shopify hosted 3D model."""
type Model3d implements Media & Node {
  """A word or phrase to share the nature or contents of a media."""
  alt: String

  """A globally-unique identifier."""
  id: ID!

  """The media content type."""
  mediaContentType: MediaContentType!

  """The preview image for the media."""
  previewImage: Image

  """The sources for a 3d model."""
  sources: [Model3dSource!]!
}

"""Represents a source for a Shopify hosted 3d model."""
type Model3dSource {
  """The filesize of the 3d model."""
  filesize: Int!

  """The format of the 3d model."""
  format: String!

  """The MIME type of the 3d model."""
  mimeType: String!

  """The URL of the 3d model."""
  url: String!
}

"""
A monetary value string without a currency symbol or code. Example value: `"100.57"`.
"""
scalar Money

"""Specifies the fields for a monetary value with currency."""
input MoneyInput {
  """Decimal money amount."""
  amount: Decimal!

  """Currency of the money."""
  currencyCode: CurrencyCode!
}

"A monetary value with currency.\n"
type MoneyV2 {
  """Decimal money amount."""
  amount: Decimal!

  """Currency of the money."""
  currencyCode: CurrencyCode!
}

"An auto-generated type for paginating through multiple MoneyV2s.\n"
type MoneyV2Connection {
  """A list of edges."""
  edges: [MoneyV2Edge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one MoneyV2 and a cursor during pagination.\n"
type MoneyV2Edge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of MoneyV2Edge."""
  node: MoneyV2!
}

"""
The schema’s entry-point for mutations. This acts as the public, top-level API from which all mutation queries must start.
"""
type Mutation {
  """
  Updates the attributes of a checkout if `allowPartialAddresses` is `true`.
  """
  checkoutAttributesUpdate(
    """The ID of the checkout."""
    checkoutId: ID!

    """The fields used to update a checkout's attributes."""
    input: CheckoutAttributesUpdateInput!
  ): CheckoutAttributesUpdatePayload @deprecated(reason: "Use `checkoutAttributesUpdateV2` instead")

  """
  Updates the attributes of a checkout if `allowPartialAddresses` is `true`.
  """
  checkoutAttributesUpdateV2(
    """The ID of the checkout."""
    checkoutId: ID!

    """The checkout attributes to update."""
    input: CheckoutAttributesUpdateV2Input!
  ): CheckoutAttributesUpdateV2Payload

  """
  Completes a checkout without providing payment information. You can use this mutation for free items or items whose purchase price is covered by a gift card.
  """
  checkoutCompleteFree(
    """The ID of the checkout."""
    checkoutId: ID!
  ): CheckoutCompleteFreePayload

  """Completes a checkout using a credit card token from Shopify's Vault."""
  checkoutCompleteWithCreditCard(
    """The ID of the checkout."""
    checkoutId: ID!

    """The credit card info to apply as a payment."""
    payment: CreditCardPaymentInput!
  ): CheckoutCompleteWithCreditCardPayload @deprecated(reason: "Use `checkoutCompleteWithCreditCardV2` instead")

  """
  Completes a checkout using a credit card token from Shopify's card vault. Before you can complete checkouts using CheckoutCompleteWithCreditCardV2, you need to  [_request payment processing_](https://help.shopify.com/api/guides/sales-channel-sdk/getting-started#request-payment-processing).
  """
  checkoutCompleteWithCreditCardV2(
    """The ID of the checkout."""
    checkoutId: ID!

    """The credit card info to apply as a payment."""
    payment: CreditCardPaymentInputV2!
  ): CheckoutCompleteWithCreditCardV2Payload

  """Completes a checkout with a tokenized payment."""
  checkoutCompleteWithTokenizedPayment(
    """The ID of the checkout."""
    checkoutId: ID!

    """The info to apply as a tokenized payment."""
    payment: TokenizedPaymentInput!
  ): CheckoutCompleteWithTokenizedPaymentPayload @deprecated(reason: "Use `checkoutCompleteWithTokenizedPaymentV2` instead")

  """Completes a checkout with a tokenized payment."""
  checkoutCompleteWithTokenizedPaymentV2(
    """The ID of the checkout."""
    checkoutId: ID!

    """The info to apply as a tokenized payment."""
    payment: TokenizedPaymentInputV2!
  ): CheckoutCompleteWithTokenizedPaymentV2Payload @deprecated(reason: "Use `checkoutCompleteWithTokenizedPaymentV3` instead")

  """Completes a checkout with a tokenized payment."""
  checkoutCompleteWithTokenizedPaymentV3(
    """The ID of the checkout."""
    checkoutId: ID!

    """The info to apply as a tokenized payment."""
    payment: TokenizedPaymentInputV3!
  ): CheckoutCompleteWithTokenizedPaymentV3Payload

  """Creates a new checkout."""
  checkoutCreate(
    """The fields used to create a checkout."""
    input: CheckoutCreateInput!
  ): CheckoutCreatePayload

  """Associates a customer to the checkout."""
  checkoutCustomerAssociate(
    """The ID of the checkout."""
    checkoutId: ID!

    """The customer access token of the customer to associate."""
    customerAccessToken: String!
  ): CheckoutCustomerAssociatePayload @deprecated(reason: "Use `checkoutCustomerAssociateV2` instead")

  """Associates a customer to the checkout."""
  checkoutCustomerAssociateV2(
    """The ID of the checkout."""
    checkoutId: ID!

    """The customer access token of the customer to associate."""
    customerAccessToken: String!
  ): CheckoutCustomerAssociateV2Payload

  """Disassociates the current checkout customer from the checkout."""
  checkoutCustomerDisassociate(
    """The ID of the checkout."""
    checkoutId: ID!
  ): CheckoutCustomerDisassociatePayload @deprecated(reason: "Use `checkoutCustomerDisassociateV2` instead")

  """Disassociates the current checkout customer from the checkout."""
  checkoutCustomerDisassociateV2(
    """The ID of the checkout."""
    checkoutId: ID!
  ): CheckoutCustomerDisassociateV2Payload

  """Applies a discount to an existing checkout using a discount code."""
  checkoutDiscountCodeApply(
    """The ID of the checkout."""
    checkoutId: ID!

    """The discount code to apply to the checkout."""
    discountCode: String!
  ): CheckoutDiscountCodeApplyPayload @deprecated(reason: "Use `checkoutDiscountCodeApplyV2` instead")

  """Applies a discount to an existing checkout using a discount code."""
  checkoutDiscountCodeApplyV2(
    """The ID of the checkout."""
    checkoutId: ID!

    """The discount code to apply to the checkout."""
    discountCode: String!
  ): CheckoutDiscountCodeApplyV2Payload

  """Removes the applied discount from an existing checkout."""
  checkoutDiscountCodeRemove(
    """The ID of the checkout."""
    checkoutId: ID!
  ): CheckoutDiscountCodeRemovePayload

  """Updates the email on an existing checkout."""
  checkoutEmailUpdate(
    """The ID of the checkout."""
    checkoutId: ID!

    """The email to update the checkout with."""
    email: String!
  ): CheckoutEmailUpdatePayload @deprecated(reason: "Use `checkoutEmailUpdateV2` instead")

  """Updates the email on an existing checkout."""
  checkoutEmailUpdateV2(
    """The ID of the checkout."""
    checkoutId: ID!

    """The email to update the checkout with."""
    email: String!
  ): CheckoutEmailUpdateV2Payload

  """
  Applies a gift card to an existing checkout using a gift card code. This will replace all currently applied gift cards.
  """
  checkoutGiftCardApply(
    """The ID of the checkout."""
    checkoutId: ID!

    """The code of the gift card to apply on the checkout."""
    giftCardCode: String!
  ): CheckoutGiftCardApplyPayload @deprecated(reason: "Use `checkoutGiftCardsAppend` instead")

  """Removes an applied gift card from the checkout."""
  checkoutGiftCardRemove(
    """The ID of the Applied Gift Card to remove from the Checkout."""
    appliedGiftCardId: ID!

    """The ID of the checkout."""
    checkoutId: ID!
  ): CheckoutGiftCardRemovePayload @deprecated(reason: "Use `checkoutGiftCardRemoveV2` instead")

  """Removes an applied gift card from the checkout."""
  checkoutGiftCardRemoveV2(
    """The ID of the Applied Gift Card to remove from the Checkout."""
    appliedGiftCardId: ID!

    """The ID of the checkout."""
    checkoutId: ID!
  ): CheckoutGiftCardRemoveV2Payload

  """Appends gift cards to an existing checkout."""
  checkoutGiftCardsAppend(
    """The ID of the checkout."""
    checkoutId: ID!

    """A list of gift card codes to append to the checkout."""
    giftCardCodes: [String!]!
  ): CheckoutGiftCardsAppendPayload

  """Adds a list of line items to a checkout."""
  checkoutLineItemsAdd(
    """The ID of the checkout."""
    checkoutId: ID!

    """A list of line item objects to add to the checkout."""
    lineItems: [CheckoutLineItemInput!]!
  ): CheckoutLineItemsAddPayload

  """Removes line items from an existing checkout."""
  checkoutLineItemsRemove(
    """The checkout on which to remove line items."""
    checkoutId: ID!

    """Line item ids to remove."""
    lineItemIds: [ID!]!
  ): CheckoutLineItemsRemovePayload

  """Sets a list of line items to a checkout."""
  checkoutLineItemsReplace(
    """The ID of the checkout."""
    checkoutId: ID!

    """A list of line item objects to set on the checkout."""
    lineItems: [CheckoutLineItemInput!]!
  ): CheckoutLineItemsReplacePayload

  """Updates line items on a checkout."""
  checkoutLineItemsUpdate(
    """The checkout on which to update line items."""
    checkoutId: ID!

    """Line items to update."""
    lineItems: [CheckoutLineItemUpdateInput!]!
  ): CheckoutLineItemsUpdatePayload

  """Updates the shipping address of an existing checkout."""
  checkoutShippingAddressUpdate(
    """The ID of the checkout."""
    checkoutId: ID!

    """The shipping address to where the line items will be shipped."""
    shippingAddress: MailingAddressInput!
  ): CheckoutShippingAddressUpdatePayload @deprecated(reason: "Use `checkoutShippingAddressUpdateV2` instead")

  """Updates the shipping address of an existing checkout."""
  checkoutShippingAddressUpdateV2(
    """The ID of the checkout."""
    checkoutId: ID!

    """The shipping address to where the line items will be shipped."""
    shippingAddress: MailingAddressInput!
  ): CheckoutShippingAddressUpdateV2Payload

  """Updates the shipping lines on an existing checkout."""
  checkoutShippingLineUpdate(
    """The ID of the checkout."""
    checkoutId: ID!

    """
    A unique identifier to a Checkout’s shipping provider, price, and title combination, enabling the customer to select the availableShippingRates.
    """
    shippingRateHandle: String!
  ): CheckoutShippingLineUpdatePayload

  "Creates a customer access token.\nThe customer access token is required to modify the customer object in any way.\n"
  customerAccessTokenCreate(
    """The fields used to create a customer access token."""
    input: CustomerAccessTokenCreateInput!
  ): CustomerAccessTokenCreatePayload

  "Creates a customer access token using a multipass token instead of email and password.\nA customer record is created if customer does not exist. If a customer record already\nexists but the record is disabled, then it's enabled.\n"
  customerAccessTokenCreateWithMultipass(
    """A valid multipass token to be authenticated."""
    multipassToken: String!
  ): CustomerAccessTokenCreateWithMultipassPayload

  """Permanently destroys a customer access token."""
  customerAccessTokenDelete(
    """The access token used to identify the customer."""
    customerAccessToken: String!
  ): CustomerAccessTokenDeletePayload

  "Renews a customer access token.\n\nAccess token renewal must happen *before* a token expires.\nIf a token has already expired, a new one should be created instead via `customerAccessTokenCreate`.\n"
  customerAccessTokenRenew(
    """The access token used to identify the customer."""
    customerAccessToken: String!
  ): CustomerAccessTokenRenewPayload

  """Activates a customer."""
  customerActivate(
    """Specifies the customer to activate."""
    id: ID!

    """The fields used to activate a customer."""
    input: CustomerActivateInput!
  ): CustomerActivatePayload

  """
  Activates a customer with the activation url received from `customerCreate`.
  """
  customerActivateByUrl(
    """The customer activation URL."""
    activationUrl: URL!

    """A new password set during activation."""
    password: String!
  ): CustomerActivateByUrlPayload

  """Creates a new address for a customer."""
  customerAddressCreate(
    """The customer mailing address to create."""
    address: MailingAddressInput!

    """The access token used to identify the customer."""
    customerAccessToken: String!
  ): CustomerAddressCreatePayload

  """Permanently deletes the address of an existing customer."""
  customerAddressDelete(
    """The access token used to identify the customer."""
    customerAccessToken: String!

    """Specifies the address to delete."""
    id: ID!
  ): CustomerAddressDeletePayload

  """Updates the address of an existing customer."""
  customerAddressUpdate(
    """The customer’s mailing address."""
    address: MailingAddressInput!

    """The access token used to identify the customer."""
    customerAccessToken: String!

    """Specifies the customer address to update."""
    id: ID!
  ): CustomerAddressUpdatePayload

  """Creates a new customer."""
  customerCreate(
    """The fields used to create a new customer."""
    input: CustomerCreateInput!
  ): CustomerCreatePayload

  """Updates the default address of an existing customer."""
  customerDefaultAddressUpdate(
    """ID of the address to set as the new default for the customer."""
    addressId: ID!

    """The access token used to identify the customer."""
    customerAccessToken: String!
  ): CustomerDefaultAddressUpdatePayload

  """
  Sends a reset password email to the customer, as the first step in the reset password process.
  """
  customerRecover(
    """The email address of the customer to recover."""
    email: String!
  ): CustomerRecoverPayload

  """
  Resets a customer’s password with a token received from `CustomerRecover`.
  """
  customerReset(
    """Specifies the customer to reset."""
    id: ID!

    """The fields used to reset a customer’s password."""
    input: CustomerResetInput!
  ): CustomerResetPayload

  """
  Resets a customer’s password with the reset password url received from `CustomerRecover`.
  """
  customerResetByUrl(
    """New password that will be set as part of the reset password process."""
    password: String!

    """The customer's reset password url."""
    resetUrl: URL!
  ): CustomerResetByUrlPayload

  """Updates an existing customer."""
  customerUpdate(
    """The customer object input."""
    customer: CustomerUpdateInput!

    """The access token used to identify the customer."""
    customerAccessToken: String!
  ): CustomerUpdatePayload
}

"An object with an ID field to support global identification, in accordance with the\n[Relay specification](https://relay.dev/graphql/objectidentification.htm#sec-Node-Interface).\nThis interface is used by the [node](https://shopify.dev/api/admin-graphql/unstable/queries/node)\nand [nodes](https://shopify.dev/api/admin-graphql/unstable/queries/nodes) queries.\n"
interface Node {
  """A globally-unique identifier."""
  id: ID!
}

"""
An order is a customer’s completed request to purchase one or more products from a shop. An order is created when a customer completes the checkout process, during which time they provides an email address, billing address and payment information.
"""
type Order implements Node {
  """
  The reason for the order's cancellation. Returns `null` if the order wasn't canceled.
  """
  cancelReason: OrderCancelReason

  """
  The date and time when the order was canceled. Returns null if the order wasn't canceled.
  """
  canceledAt: DateTime

  """The code of the currency used for the payment."""
  currencyCode: CurrencyCode!

  """
  The subtotal of line items and their discounts, excluding line items that have been removed. Does not contain order-level discounts, duties, shipping costs, or shipping discounts. Taxes are not included unless the order is a taxes-included order.
  """
  currentSubtotalPrice: MoneyV2!

  """The total cost of duties for the order, including refunds."""
  currentTotalDuties: MoneyV2

  """
  The total amount of the order, including duties, taxes and discounts, minus amounts for line items that have been removed.
  """
  currentTotalPrice: MoneyV2!

  """
  The total of all taxes applied to the order, excluding taxes for returned line items.
  """
  currentTotalTax: MoneyV2!

  """The locale code in which this specific order happened."""
  customerLocale: String

  """The unique URL that the customer can use to access the order."""
  customerUrl: URL

  """Discounts that have been applied on the order."""
  discountApplications(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): DiscountApplicationConnection!

  """Whether the order has had any edits applied or not."""
  edited: Boolean!

  """The customer's email address."""
  email: String

  """The financial status of the order."""
  financialStatus: OrderFinancialStatus

  """The fulfillment status for the order."""
  fulfillmentStatus: OrderFulfillmentStatus!

  """A globally-unique identifier."""
  id: ID!

  """List of the order’s line items."""
  lineItems(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): OrderLineItemConnection!

  "Unique identifier for the order that appears on the order.\nFor example, _#1000_ or _Store1001.\n"
  name: String!

  """
  A unique numeric identifier for the order for use by shop owner and customer.
  """
  orderNumber: Int!

  """The total cost of duties charged at checkout."""
  originalTotalDuties: MoneyV2

  """The total price of the order before any applied edits."""
  originalTotalPrice: MoneyV2!

  """The customer's phone number for receiving SMS notifications."""
  phone: String

  "The date and time when the order was imported.\nThis value can be set to dates in the past when importing from other systems.\nIf no value is provided, it will be auto-generated based on current date and time.\n"
  processedAt: DateTime!

  """The address to where the order will be shipped."""
  shippingAddress: MailingAddress

  "The discounts that have been allocated onto the shipping line by discount applications.\n"
  shippingDiscountAllocations: [DiscountAllocation!]!

  """The unique URL for the order's status page."""
  statusUrl: URL!

  """Price of the order before shipping and taxes."""
  subtotalPrice: Money @deprecated(reason: "Use `subtotalPriceV2` instead")

  """Price of the order before duties, shipping and taxes."""
  subtotalPriceV2: MoneyV2

  """List of the order’s successful fulfillments."""
  successfulFulfillments(
    """Truncate the array result to this size."""
    first: Int
  ): [Fulfillment!]

  """
  The sum of all the prices of all the items in the order, taxes and discounts included (must be positive).
  """
  totalPrice: Money! @deprecated(reason: "Use `totalPriceV2` instead")

  """
  The sum of all the prices of all the items in the order, duties, taxes and discounts included (must be positive).
  """
  totalPriceV2: MoneyV2!

  """The total amount that has been refunded."""
  totalRefunded: Money! @deprecated(reason: "Use `totalRefundedV2` instead")

  """The total amount that has been refunded."""
  totalRefundedV2: MoneyV2!

  """The total cost of shipping."""
  totalShippingPrice: Money! @deprecated(reason: "Use `totalShippingPriceV2` instead")

  """The total cost of shipping."""
  totalShippingPriceV2: MoneyV2!

  """The total cost of taxes."""
  totalTax: Money @deprecated(reason: "Use `totalTaxV2` instead")

  """The total cost of taxes."""
  totalTaxV2: MoneyV2
}

"""Represents the reason for the order's cancellation."""
enum OrderCancelReason {
  """The customer wanted to cancel the order."""
  CUSTOMER

  """Payment was declined."""
  DECLINED

  """The order was fraudulent."""
  FRAUD

  """There was insufficient inventory."""
  INVENTORY

  """The order was canceled for an unlisted reason."""
  OTHER
}

"An auto-generated type for paginating through multiple Orders.\n"
type OrderConnection {
  """A list of edges."""
  edges: [OrderEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one Order and a cursor during pagination.\n"
type OrderEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of OrderEdge."""
  node: Order!
}

"""Represents the order's current financial status."""
enum OrderFinancialStatus {
  """Displayed as **Authorized**."""
  AUTHORIZED

  """Displayed as **Paid**."""
  PAID

  """Displayed as **Partially paid**."""
  PARTIALLY_PAID

  """Displayed as **Partially refunded**."""
  PARTIALLY_REFUNDED

  """Displayed as **Pending**."""
  PENDING

  """Displayed as **Refunded**."""
  REFUNDED

  """Displayed as **Voided**."""
  VOIDED
}

"""
Represents the order's aggregated fulfillment status for display purposes.
"""
enum OrderFulfillmentStatus {
  """
  Displayed as **Fulfilled**. All of the items in the order have been fulfilled.
  """
  FULFILLED

  """
  Displayed as **In progress**. Some of the items in the order have been fulfilled, or a request for fulfillment has been sent to the fulfillment service.
  """
  IN_PROGRESS

  """
  Displayed as **Open**. None of the items in the order have been fulfilled. Replaced by "UNFULFILLED" status.
  """
  OPEN

  """
  Displayed as **Partially fulfilled**. Some of the items in the order have been fulfilled.
  """
  PARTIALLY_FULFILLED

  """
  Displayed as **Pending fulfillment**. A request for fulfillment of some items awaits a response from the fulfillment service. Replaced by "IN_PROGRESS" status.
  """
  PENDING_FULFILLMENT

  """
  Displayed as **Restocked**. All of the items in the order have been restocked. Replaced by "UNFULFILLED" status.
  """
  RESTOCKED

  """
  Displayed as **Scheduled**. All of the unfulfilled items in this order are scheduled for fulfillment at later time.
  """
  SCHEDULED

  """
  Displayed as **Unfulfilled**. None of the items in the order have been fulfilled.
  """
  UNFULFILLED
}

"""
Represents a single line in an order. There is one line item for each distinct product variant.
"""
type OrderLineItem {
  """
  The number of entries associated to the line item minus the items that have been removed.
  """
  currentQuantity: Int!

  """List of custom attributes associated to the line item."""
  customAttributes: [Attribute!]!

  """
  The discounts that have been allocated onto the order line item by discount applications.
  """
  discountAllocations: [DiscountAllocation!]!

  """
  The total price of the line item, including discounts, and displayed in the presentment currency.
  """
  discountedTotalPrice: MoneyV2!

  """
  The total price of the line item, not including any discounts. The total price is calculated using the original unit price multiplied by the quantity, and it is displayed in the presentment currency.
  """
  originalTotalPrice: MoneyV2!

  """The number of products variants associated to the line item."""
  quantity: Int!

  """The title of the product combined with title of the variant."""
  title: String!

  """The product variant object associated to the line item."""
  variant: ProductVariant
}

"An auto-generated type for paginating through multiple OrderLineItems.\n"
type OrderLineItemConnection {
  """A list of edges."""
  edges: [OrderLineItemEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one OrderLineItem and a cursor during pagination.\n"
type OrderLineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of OrderLineItemEdge."""
  node: OrderLineItem!
}

"""The set of valid sort keys for the Order query."""
enum OrderSortKeys {
  """Sort by the `id` value."""
  ID

  """Sort by the `processed_at` value."""
  PROCESSED_AT

  "During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the\nresults by relevance to the search term(s). When no search query is specified, this sort key is not\ndeterministic and should not be used.\n"
  RELEVANCE

  """Sort by the `total_price` value."""
  TOTAL_PRICE
}

"""
Shopify merchants can create pages to hold static HTML content. Each Page object represents a custom page on the online store.
"""
type Page implements Node {
  """The description of the page, complete with HTML formatting."""
  body: HTML!

  """Summary of the page body."""
  bodySummary: String!

  """The timestamp of the page creation."""
  createdAt: DateTime!

  """
  A human-friendly unique string for the page automatically generated from its title.
  """
  handle: String!

  """A globally-unique identifier."""
  id: ID!

  """The page's SEO information."""
  seo: SEO

  """The title of the page."""
  title: String!

  """The timestamp of the latest page update."""
  updatedAt: DateTime!

  """The url pointing to the page accessible from the web."""
  url: URL! @deprecated(reason: "Use `onlineStoreUrl` instead")
}

"An auto-generated type for paginating through multiple Pages.\n"
type PageConnection {
  """A list of edges."""
  edges: [PageEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one Page and a cursor during pagination.\n"
type PageEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of PageEdge."""
  node: Page!
}

"Returns information about pagination in a connection, in accordance with the\n[Relay specification](https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo).\n"
type PageInfo {
  """Whether there are more pages to fetch following the current page."""
  hasNextPage: Boolean!

  """Whether there are any pages prior to the current page."""
  hasPreviousPage: Boolean!
}

"""The set of valid sort keys for the Page query."""
enum PageSortKeys {
  """Sort by the `id` value."""
  ID

  "During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the\nresults by relevance to the search term(s). When no search query is specified, this sort key is not\ndeterministic and should not be used.\n"
  RELEVANCE

  """Sort by the `title` value."""
  TITLE

  """Sort by the `updated_at` value."""
  UPDATED_AT
}

"""A payment applied to a checkout."""
type Payment implements Node {
  """The amount of the payment."""
  amount: Money! @deprecated(reason: "Use `amountV2` instead")

  """The amount of the payment."""
  amountV2: MoneyV2!

  """The billing address for the payment."""
  billingAddress: MailingAddress

  """The checkout to which the payment belongs."""
  checkout: Checkout!

  """The credit card used for the payment in the case of direct payments."""
  creditCard: CreditCard

  """
  A message describing a processing error during asynchronous processing.
  """
  errorMessage: String

  """A globally-unique identifier."""
  id: ID!

  "A client-side generated token to identify a payment and perform idempotent operations.\nFor more information, refer to\n[Idempotent requests](https://shopify.dev/concepts/about-apis/idempotent-requests).\n"
  idempotencyKey: String

  """
  The URL where the customer needs to be redirected so they can complete the 3D Secure payment flow.
  """
  nextActionUrl: URL

  """Whether or not the payment is still processing asynchronously."""
  ready: Boolean!

  """
  A flag to indicate if the payment is to be done in test mode for gateways that support it.
  """
  test: Boolean!

  """
  The actual transaction recorded by Shopify after having processed the payment with the gateway.
  """
  transaction: Transaction
}

"""Settings related to payments."""
type PaymentSettings {
  """List of the card brands which the shop accepts."""
  acceptedCardBrands: [CardBrand!]!

  """The url pointing to the endpoint to vault credit cards."""
  cardVaultUrl: URL!

  """The country where the shop is located."""
  countryCode: CountryCode!

  """The three-letter code for the shop's primary currency."""
  currencyCode: CurrencyCode!

  """
  A list of enabled currencies (ISO 4217 format) that the shop accepts. Merchants can enable currencies from their Shopify Payments settings in the Shopify admin.
  """
  enabledPresentmentCurrencies: [CurrencyCode!]!

  """The shop’s Shopify Payments account id."""
  shopifyPaymentsAccountId: String

  """List of the digital wallets which the shop supports."""
  supportedDigitalWallets: [DigitalWallet!]!
}

"""The valid values for the types of payment token."""
enum PaymentTokenType {
  """Apple Pay token type."""
  APPLE_PAY

  """Google Pay token type."""
  GOOGLE_PAY

  """Shopify Pay token type."""
  SHOPIFY_PAY

  """Vault payment token type."""
  VAULT
}

"""The value of the percentage pricing object."""
type PricingPercentageValue {
  """The percentage value of the object."""
  percentage: Float!
}

"""The price value (fixed or percentage) for a discount application."""
union PricingValue = MoneyV2 | PricingPercentageValue

"""
A product represents an individual item for sale in a Shopify store. Products are often physical, but they don't have to be.
For example, a digital download (such as a movie, music or ebook file) also qualifies as a product, as do services (such as equipment rental, work for hire, customization of another product or an extended warranty).
"""
type Product implements HasMetafields & Node {
  """Indicates if at least one product variant is available for sale."""
  availableForSale: Boolean!

  """List of collections a product belongs to."""
  collections(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): CollectionConnection!

  """The compare at price of the product across all variants."""
  compareAtPriceRange: ProductPriceRange!

  """The date and time when the product was created."""
  createdAt: DateTime!

  """
  Stripped description of the product, single line with HTML tags removed.
  """
  description(
    """Truncates string after the given length."""
    truncateAt: Int
  ): String!

  """The description of the product, complete with HTML formatting."""
  descriptionHtml: HTML!

  "A human-friendly unique string for the Product automatically generated from its title.\nThey are used by the Liquid templating language to refer to objects.\n"
  handle: String!

  """A globally-unique identifier."""
  id: ID!

  """List of images associated with the product."""
  images(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """
    Crops the image according to the specified region. This argument is deprecated: Use `crop` on `Image.transformedSrc` instead.
    """
    crop: CropRegion

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """
    Image size multiplier for high-resolution retina displays. Must be between 1 and 3. This argument is deprecated: Use `scale` on `Image.transformedSrc` instead.
    """
    scale: Int = 1

    """Sort the underlying list by the given key."""
    sortKey: ProductImageSortKeys = POSITION
  ): ImageConnection!

  """The media associated with the product."""
  media(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ProductMediaSortKeys = POSITION
  ): MediaConnection!

  """Returns a metafield found by namespace and key."""
  metafield(
    """Identifier for the metafield (maximum of 30 characters)."""
    key: String!

    """Container for a set of metafields (maximum of 20 characters)."""
    namespace: String!
  ): Metafield

  """A paginated list of metafields associated with the resource."""
  metafields(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Container for a set of metafields (maximum of 20 characters)."""
    namespace: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): MetafieldConnection! @deprecated(reason: "The `metafields` field will be removed in the future in favor of using [aliases](https://graphql.org/learn/queries/#aliases) with the `metafield` field.\n")

  """
  The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel.
  """
  onlineStoreUrl: URL

  """List of product options."""
  options(
    """Truncate the array result to this size."""
    first: Int
  ): [ProductOption!]!

  """List of price ranges in the presentment currencies for this shop."""
  presentmentPriceRanges(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Specifies the presentment currencies to return a price range in."""
    presentmentCurrencies: [CurrencyCode!]

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ProductPriceRangeConnection! @deprecated(reason: "Use `@inContext` instead.")

  """The price range."""
  priceRange: ProductPriceRange!

  """
  A categorization that a product can be tagged with, commonly used for filtering and searching.
  """
  productType: String!

  """The date and time when the product was published to the channel."""
  publishedAt: DateTime!

  """The product's SEO information."""
  seo: SEO!

  "A comma separated list of tags that have been added to the product.\nAdditional access scope required for private apps: unauthenticated_read_product_tags.\n"
  tags: [String!]!

  """The product’s title."""
  title: String!

  """The total quantity of inventory in stock for this Product."""
  totalInventory: Int

  "The date and time when the product was last modified.\nA product's `updatedAt` value can change for different reasons. For example, if an order\nis placed for a product that has inventory tracking set up, then the inventory adjustment\nis counted as an update.\n"
  updatedAt: DateTime!

  "Find a product’s variant based on its selected options.\nThis is useful for converting a user’s selection of product options into a single matching variant.\nIf there is not a variant for the selected options, `null` will be returned.\n"
  variantBySelectedOptions(
    """The input fields used for a selected option."""
    selectedOptions: [SelectedOptionInput!]!
  ): ProductVariant

  """List of the product’s variants."""
  variants(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ProductVariantSortKeys = POSITION
  ): ProductVariantConnection!

  """The product’s vendor name."""
  vendor: String!
}

"""The set of valid sort keys for the ProductCollection query."""
enum ProductCollectionSortKeys {
  """Sort by the `best-selling` value."""
  BEST_SELLING

  """Sort by the `collection-default` value."""
  COLLECTION_DEFAULT

  """Sort by the `created` value."""
  CREATED

  """Sort by the `id` value."""
  ID

  """Sort by the `manual` value."""
  MANUAL

  """Sort by the `price` value."""
  PRICE

  "During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the\nresults by relevance to the search term(s). When no search query is specified, this sort key is not\ndeterministic and should not be used.\n"
  RELEVANCE

  """Sort by the `title` value."""
  TITLE
}

"An auto-generated type for paginating through multiple Products.\n"
type ProductConnection {
  """A list of edges."""
  edges: [ProductEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one Product and a cursor during pagination.\n"
type ProductEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ProductEdge."""
  node: Product!
}

"""The set of valid sort keys for the ProductImage query."""
enum ProductImageSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT

  """Sort by the `id` value."""
  ID

  """Sort by the `position` value."""
  POSITION

  "During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the\nresults by relevance to the search term(s). When no search query is specified, this sort key is not\ndeterministic and should not be used.\n"
  RELEVANCE
}

"""The set of valid sort keys for the ProductMedia query."""
enum ProductMediaSortKeys {
  """Sort by the `id` value."""
  ID

  """Sort by the `position` value."""
  POSITION

  "During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the\nresults by relevance to the search term(s). When no search query is specified, this sort key is not\ndeterministic and should not be used.\n"
  RELEVANCE
}

"Product property names like \"Size\", \"Color\", and \"Material\" that the customers can select.\nVariants are selected based on permutations of these options.\n255 characters limit each.\n"
type ProductOption implements Node {
  """A globally-unique identifier."""
  id: ID!

  """The product option’s name."""
  name: String!

  """The corresponding value to the product option name."""
  values: [String!]!
}

"""The price range of the product."""
type ProductPriceRange {
  """The highest variant's price."""
  maxVariantPrice: MoneyV2!

  """The lowest variant's price."""
  minVariantPrice: MoneyV2!
}

"An auto-generated type for paginating through multiple ProductPriceRanges.\n"
type ProductPriceRangeConnection {
  """A list of edges."""
  edges: [ProductPriceRangeEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one ProductPriceRange and a cursor during pagination.\n"
type ProductPriceRangeEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ProductPriceRangeEdge."""
  node: ProductPriceRange!
}

"""The set of valid sort keys for the Product query."""
enum ProductSortKeys {
  """Sort by the `best_selling` value."""
  BEST_SELLING

  """Sort by the `created_at` value."""
  CREATED_AT

  """Sort by the `id` value."""
  ID

  """Sort by the `price` value."""
  PRICE

  """Sort by the `product_type` value."""
  PRODUCT_TYPE

  "During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the\nresults by relevance to the search term(s). When no search query is specified, this sort key is not\ndeterministic and should not be used.\n"
  RELEVANCE

  """Sort by the `title` value."""
  TITLE

  """Sort by the `updated_at` value."""
  UPDATED_AT

  """Sort by the `vendor` value."""
  VENDOR
}

"""
A product variant represents a different version of a product, such as differing sizes or differing colors.
"""
type ProductVariant implements HasMetafields & Node {
  """Indicates if the product variant is in stock."""
  available: Boolean @deprecated(reason: "Use `availableForSale` instead")

  """Indicates if the product variant is available for sale."""
  availableForSale: Boolean!

  """
  The compare at price of the variant. This can be used to mark a variant as on sale, when `compareAtPrice` is higher than `price`.
  """
  compareAtPrice: Money @deprecated(reason: "Use `compareAtPriceV2` instead")

  """
  The compare at price of the variant. This can be used to mark a variant as on sale, when `compareAtPriceV2` is higher than `priceV2`.
  """
  compareAtPriceV2: MoneyV2

  """
  Whether a product is out of stock but still available for purchase (used for backorders).
  """
  currentlyNotInStock: Boolean!

  """A globally-unique identifier."""
  id: ID!

  "Image associated with the product variant. This field falls back to the product image if no image is available.\n"
  image(
    """
    Crops the image according to the specified region. This argument is deprecated: Use `crop` on `Image.transformedSrc` instead.
    """
    crop: CropRegion

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image size multiplier for high-resolution retina displays. Must be between 1 and 3. This argument is deprecated: Use `scale` on `Image.transformedSrc` instead.
    """
    scale: Int = 1
  ): Image

  """Returns a metafield found by namespace and key."""
  metafield(
    """Identifier for the metafield (maximum of 30 characters)."""
    key: String!

    """Container for a set of metafields (maximum of 20 characters)."""
    namespace: String!
  ): Metafield

  """A paginated list of metafields associated with the resource."""
  metafields(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Container for a set of metafields (maximum of 20 characters)."""
    namespace: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): MetafieldConnection! @deprecated(reason: "The `metafields` field will be removed in the future in favor of using [aliases](https://graphql.org/learn/queries/#aliases) with the `metafield` field.\n")

  """
  List of prices and compare-at prices in the presentment currencies for this shop.
  """
  presentmentPrices(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """The presentment currencies prices should return in."""
    presentmentCurrencies: [CurrencyCode!]

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ProductVariantPricePairConnection! @deprecated(reason: "Use `@inContext` instead.")

  """List of unit prices in the presentment currencies for this shop."""
  presentmentUnitPrices(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Specify the currencies in which to return presentment unit prices."""
    presentmentCurrencies: [CurrencyCode!]

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): MoneyV2Connection! @deprecated(reason: "Use `@inContext` instead.")

  """The product variant’s price."""
  price: Money! @deprecated(reason: "Use `priceV2` instead")

  """The product variant’s price."""
  priceV2: MoneyV2!

  """The product object that the product variant belongs to."""
  product: Product!

  """The total sellable quantity of the variant for online sales channels."""
  quantityAvailable: Int

  """
  Whether a customer needs to provide a shipping address when placing an order for the product variant.
  """
  requiresShipping: Boolean!

  """List of product options applied to the variant."""
  selectedOptions: [SelectedOption!]!

  """The SKU (stock keeping unit) associated with the variant."""
  sku: String

  """The product variant’s title."""
  title: String!

  """
  The unit price value for the variant based on the variant's measurement.
  """
  unitPrice: MoneyV2

  """The unit price measurement for the variant."""
  unitPriceMeasurement: UnitPriceMeasurement

  """
  The weight of the product variant in the unit system specified with `weight_unit`.
  """
  weight: Float

  """Unit of measurement for weight."""
  weightUnit: WeightUnit!
}

"An auto-generated type for paginating through multiple ProductVariants.\n"
type ProductVariantConnection {
  """A list of edges."""
  edges: [ProductVariantEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one ProductVariant and a cursor during pagination.\n"
type ProductVariantEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ProductVariantEdge."""
  node: ProductVariant!
}

"The compare-at price and price of a variant sharing a currency.\n"
type ProductVariantPricePair {
  """The compare-at price of the variant with associated currency."""
  compareAtPrice: MoneyV2

  """The price of the variant with associated currency."""
  price: MoneyV2!
}

"An auto-generated type for paginating through multiple ProductVariantPricePairs.\n"
type ProductVariantPricePairConnection {
  """A list of edges."""
  edges: [ProductVariantPricePairEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one ProductVariantPricePair and a cursor during pagination.\n"
type ProductVariantPricePairEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ProductVariantPricePairEdge."""
  node: ProductVariantPricePair!
}

"""The set of valid sort keys for the ProductVariant query."""
enum ProductVariantSortKeys {
  """Sort by the `id` value."""
  ID

  """Sort by the `position` value."""
  POSITION

  "During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the\nresults by relevance to the search term(s). When no search query is specified, this sort key is not\ndeterministic and should not be used.\n"
  RELEVANCE

  """Sort by the `sku` value."""
  SKU

  """Sort by the `title` value."""
  TITLE
}

"""
The schema’s entry-point for queries. This acts as the public, top-level API from which all queries must start.
"""
type QueryRoot {
  """List of the shop's articles."""
  articles(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `author`\n - `blog_title`\n - `created_at`\n - `tag`\n - `tag_not`\n - `updated_at`\n\nSee the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ArticleSortKeys = ID
  ): ArticleConnection!

  """Find a blog by its handle."""
  blogByHandle(
    """The handle of the blog."""
    handle: String!
  ): Blog @deprecated(reason: "Use `blog` instead")

  """List of the shop's blogs."""
  blogs(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `created_at`\n - `handle`\n - `title`\n - `updated_at`\n\nSee the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: BlogSortKeys = ID
  ): BlogConnection!

  """Find a collection by its handle."""
  collectionByHandle(
    """The handle of the collection."""
    handle: String!
  ): Collection @deprecated(reason: "Use `collection` instead")

  """List of the shop’s collections."""
  collections(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `collection_type`\n - `title`\n - `updated_at`\n\nSee the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: CollectionSortKeys = ID
  ): CollectionConnection!

  """Find a customer by its access token."""
  customer(
    """The customer access token."""
    customerAccessToken: String!
  ): Customer

  """Returns a specific node by ID."""
  node(
    """The ID of the Node to return."""
    id: ID!
  ): Node

  """Returns the list of nodes with the given IDs."""
  nodes(
    """The IDs of the Nodes to return."""
    ids: [ID!]!
  ): [Node]!

  """Find a page by its handle."""
  pageByHandle(
    """The handle of the page."""
    handle: String!
  ): Page @deprecated(reason: "Use `page` instead")

  """List of the shop's pages."""
  pages(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `created_at`\n - `handle`\n - `title`\n - `updated_at`\n\nSee the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: PageSortKeys = ID
  ): PageConnection!

  """Find a product by its handle."""
  productByHandle(
    """The handle of the product."""
    handle: String!
  ): Product @deprecated(reason: "Use `product` instead")

  "Find recommended products related to a given `product_id`.\nTo learn more about how recommendations are generated, see\n[*Showing product recommendations on product pages*](https://help.shopify.com/themes/development/recommended-products).\n"
  productRecommendations(
    """The id of the product."""
    productId: ID!
  ): [Product!]

  "Tags added to products.\nAdditional access scope required: unauthenticated_read_product_tags.\n"
  productTags(
    """Returns up to the first `n` elements from the list."""
    first: Int!
  ): StringConnection!

  """
  List of product types for the shop's products that are published to your app.
  """
  productTypes(
    """Returns up to the first `n` elements from the list."""
    first: Int!
  ): StringConnection!

  """List of the shop’s products."""
  products(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `available_for_sale`\n - `created_at`\n - `product_type`\n - `tag`\n - `tag_not`\n - `title`\n - `updated_at`\n - `variants.price`\n - `vendor`\n\nSee the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ProductSortKeys = ID
  ): ProductConnection!

  """
  The list of public Storefront API versions, including supported, release candidate and unstable versions.
  """
  publicApiVersions: [ApiVersion!]!

  """The shop associated with the storefront access token."""
  shop: Shop!
}

"""SEO information."""
type SEO {
  """The meta description."""
  description: String

  """The SEO title."""
  title: String
}

"Script discount applications capture the intentions of a discount that\nwas created by a Shopify Script.\n"
type ScriptDiscountApplication implements DiscountApplication {
  """
  The method by which the discount's value is allocated to its entitled items.
  """
  allocationMethod: DiscountApplicationAllocationMethod!

  """The description of the application as defined by the Script."""
  description: String! @deprecated(reason: "Use `title` instead")

  """Which lines of targetType that the discount is allocated over."""
  targetSelection: DiscountApplicationTargetSelection!

  """The type of line that the discount is applicable towards."""
  targetType: DiscountApplicationTargetType!

  """The title of the application as defined by the Script."""
  title: String!

  """The value of the discount application."""
  value: PricingValue!
}

"Properties used by customers to select a product variant.\nProducts can have multiple options, like different sizes or colors.\n"
type SelectedOption {
  """The product option’s name."""
  name: String!

  """The product option’s value."""
  value: String!
}

"""Specifies the input fields required for a selected option."""
input SelectedOptionInput {
  """The product option’s name."""
  name: String!

  """The product option’s value."""
  value: String!
}

"""A shipping rate to be applied to a checkout."""
type ShippingRate {
  """Human-readable unique identifier for this shipping rate."""
  handle: String!

  """Price of this shipping rate."""
  price: Money! @deprecated(reason: "Use `priceV2` instead")

  """Price of this shipping rate."""
  priceV2: MoneyV2!

  """Title of this shipping rate."""
  title: String!
}

"""
Shop represents a collection of the general settings and information about the shop.
"""
type Shop {
  """List of the shop' articles."""
  articles(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `author`\n - `blog_title`\n - `created_at`\n - `tag`\n - `tag_not`\n - `updated_at`\n\nSee the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ArticleSortKeys = ID
  ): ArticleConnection! @deprecated(reason: "Use `QueryRoot.articles` instead.")

  """List of the shop' blogs."""
  blogs(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `created_at`\n - `handle`\n - `title`\n - `updated_at`\n\nSee the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: BlogSortKeys = ID
  ): BlogConnection! @deprecated(reason: "Use `QueryRoot.blogs` instead.")

  """Find a collection by its handle."""
  collectionByHandle(
    """The handle of the collection."""
    handle: String!
  ): Collection @deprecated(reason: "Use `QueryRoot.collectionByHandle` instead.")

  """List of the shop’s collections."""
  collections(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `collection_type`\n - `title`\n - `updated_at`\n\nSee the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: CollectionSortKeys = ID
  ): CollectionConnection! @deprecated(reason: "Use `QueryRoot.collections` instead.")

  """The three-letter code for the currency that the shop accepts."""
  currencyCode: CurrencyCode! @deprecated(reason: "Use `paymentSettings` instead")

  """A description of the shop."""
  description: String

  """
  A string representing the way currency is formatted when the currency isn’t specified.
  """
  moneyFormat: String!

  """The shop’s name."""
  name: String!

  """Settings related to payments."""
  paymentSettings: PaymentSettings!

  """The shop’s primary domain."""
  primaryDomain: Domain!

  """The shop’s privacy policy."""
  privacyPolicy: ShopPolicy

  """Find a product by its handle."""
  productByHandle(
    """The handle of the product."""
    handle: String!
  ): Product @deprecated(reason: "Use `QueryRoot.productByHandle` instead.")

  "A list of tags that have been added to products.\nAdditional access scope required: unauthenticated_read_product_tags.\n"
  productTags(
    """Returns up to the first `n` elements from the list."""
    first: Int!
  ): StringConnection! @deprecated(reason: "Use `QueryRoot.productTags` instead.")

  """List of the shop’s product types."""
  productTypes(
    """Returns up to the first `n` elements from the list."""
    first: Int!
  ): StringConnection! @deprecated(reason: "Use `QueryRoot.productTypes` instead.")

  """List of the shop’s products."""
  products(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `available_for_sale`\n - `created_at`\n - `product_type`\n - `tag`\n - `tag_not`\n - `title`\n - `updated_at`\n - `variants.price`\n - `vendor`\n\nSee the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ProductSortKeys = ID
  ): ProductConnection! @deprecated(reason: "Use `QueryRoot.products` instead.")

  """The shop’s refund policy."""
  refundPolicy: ShopPolicy

  """The shop’s shipping policy."""
  shippingPolicy: ShopPolicy

  """Countries that the shop ships to."""
  shipsToCountries: [CountryCode!]!

  """The shop’s Shopify Payments account id."""
  shopifyPaymentsAccountId: String @deprecated(reason: "Use `paymentSettings` instead")

  """The shop’s terms of service."""
  termsOfService: ShopPolicy
}

"""
Policy that a merchant has configured for their store, such as their refund or privacy policy.
"""
type ShopPolicy implements Node {
  """Policy text, maximum size of 64kb."""
  body: String!

  """Policy’s handle."""
  handle: String!

  """A globally-unique identifier."""
  id: ID!

  """Policy’s title."""
  title: String!

  """Public URL to the policy."""
  url: URL!
}

"An auto-generated type for paginating through a list of Strings.\n"
type StringConnection {
  """A list of edges."""
  edges: [StringEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one String and a cursor during pagination.\n"
type StringEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of StringEdge."""
  node: String!
}

"Specifies the fields required to complete a checkout with\na tokenized payment.\n"
input TokenizedPaymentInput {
  """The amount of the payment."""
  amount: Money!

  """The billing address for the payment."""
  billingAddress: MailingAddressInput!

  """
  A unique client generated key used to avoid duplicate charges. When a duplicate payment is found, the original is returned instead of creating a new one. For more information, refer to [Idempotent requests](https://shopify.dev/concepts/about-apis/idempotent-requests).
  """
  idempotencyKey: String!

  """Public Hash Key used for AndroidPay payments only."""
  identifier: String

  """
  A simple string or JSON containing the required payment data for the tokenized payment.
  """
  paymentData: String!

  """Executes the payment in test mode if possible. Defaults to `false`."""
  test: Boolean = false

  """The type of payment token."""
  type: String!
}

"Specifies the fields required to complete a checkout with\na tokenized payment.\n"
input TokenizedPaymentInputV2 {
  """The billing address for the payment."""
  billingAddress: MailingAddressInput!

  """
  A unique client generated key used to avoid duplicate charges. When a duplicate payment is found, the original is returned instead of creating a new one. For more information, refer to [Idempotent requests](https://shopify.dev/concepts/about-apis/idempotent-requests).
  """
  idempotencyKey: String!

  """Public Hash Key used for AndroidPay payments only."""
  identifier: String

  """The amount and currency of the payment."""
  paymentAmount: MoneyInput!

  """
  A simple string or JSON containing the required payment data for the tokenized payment.
  """
  paymentData: String!

  """
  Whether to execute the payment in test mode, if possible. Test mode is not supported in production stores. Defaults to `false`.
  """
  test: Boolean = false

  """The type of payment token."""
  type: String!
}

"Specifies the fields required to complete a checkout with\na tokenized payment.\n"
input TokenizedPaymentInputV3 {
  """The billing address for the payment."""
  billingAddress: MailingAddressInput!

  """
  A unique client generated key used to avoid duplicate charges. When a duplicate payment is found, the original is returned instead of creating a new one. For more information, refer to [Idempotent requests](https://shopify.dev/concepts/about-apis/idempotent-requests).
  """
  idempotencyKey: String!

  """Public Hash Key used for AndroidPay payments only."""
  identifier: String

  """The amount and currency of the payment."""
  paymentAmount: MoneyInput!

  """
  A simple string or JSON containing the required payment data for the tokenized payment.
  """
  paymentData: String!

  """
  Whether to execute the payment in test mode, if possible. Test mode is not supported in production stores. Defaults to `false`.
  """
  test: Boolean = false

  """The type of payment token."""
  type: PaymentTokenType!
}

"""An object representing exchange of money for a product or service."""
type Transaction {
  """The amount of money that the transaction was for."""
  amount: Money! @deprecated(reason: "Use `amountV2` instead")

  """The amount of money that the transaction was for."""
  amountV2: MoneyV2!

  """The kind of the transaction."""
  kind: TransactionKind!

  """The status of the transaction."""
  status: TransactionStatus! @deprecated(reason: "Use `statusV2` instead")

  """The status of the transaction."""
  statusV2: TransactionStatus

  """Whether the transaction was done in test mode or not."""
  test: Boolean!
}

"""The different kinds of order transactions."""
enum TransactionKind {
  "An amount reserved against the cardholder's funding source.\nMoney does not change hands until the authorization is captured.\n"
  AUTHORIZATION

  """
  A transfer of the money that was reserved during the authorization stage.
  """
  CAPTURE

  """Money returned to the customer when they have paid too much."""
  CHANGE

  """An authorization for a payment taken with an EMV credit card reader."""
  EMV_AUTHORIZATION

  """An authorization and capture performed together in a single step."""
  SALE
}

"""Transaction statuses describe the status of a transaction."""
enum TransactionStatus {
  """There was an error while processing the transaction."""
  ERROR

  """The transaction failed."""
  FAILURE

  """The transaction is pending."""
  PENDING

  """The transaction succeeded."""
  SUCCESS
}

"Represents an [RFC 3986](https://datatracker.ietf.org/doc/html/rfc3986) and\n[RFC 3987](https://datatracker.ietf.org/doc/html/rfc3987)-compliant URI string.\n\nFor example, `\"https://johns-apparel.myshopify.com\"` is a valid URL. It includes a scheme (`https`) and a host\n(`johns-apparel.myshopify.com`).\n"
scalar URL

"The measurement used to calculate a unit price for a product variant (e.g. $9.99 / 100ml).\n"
type UnitPriceMeasurement {
  """The type of unit of measurement for the unit price measurement."""
  measuredType: UnitPriceMeasurementMeasuredType

  """The quantity unit for the unit price measurement."""
  quantityUnit: UnitPriceMeasurementMeasuredUnit

  """The quantity value for the unit price measurement."""
  quantityValue: Float!

  """The reference unit for the unit price measurement."""
  referenceUnit: UnitPriceMeasurementMeasuredUnit

  """The reference value for the unit price measurement."""
  referenceValue: Int!
}

"""The accepted types of unit of measurement."""
enum UnitPriceMeasurementMeasuredType {
  """Unit of measurements representing areas."""
  AREA

  """Unit of measurements representing lengths."""
  LENGTH

  """Unit of measurements representing volumes."""
  VOLUME

  """Unit of measurements representing weights."""
  WEIGHT
}

"""The valid units of measurement for a unit price measurement."""
enum UnitPriceMeasurementMeasuredUnit {
  """100 centiliters equals 1 liter."""
  CL

  """100 centimeters equals 1 meter."""
  CM

  """Metric system unit of weight."""
  G

  """1 kilogram equals 1000 grams."""
  KG

  """Metric system unit of volume."""
  L

  """Metric system unit of length."""
  M

  """Metric system unit of area."""
  M2

  """1 cubic meter equals 1000 liters."""
  M3

  """1000 milligrams equals 1 gram."""
  MG

  """1000 milliliters equals 1 liter."""
  ML

  """1000 millimeters equals 1 meter."""
  MM
}

"""Represents an error in the input of a mutation."""
type UserError implements DisplayableError {
  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""Represents a Shopify hosted video."""
type Video implements Media & Node {
  """A word or phrase to share the nature or contents of a media."""
  alt: String

  """A globally-unique identifier."""
  id: ID!

  """The media content type."""
  mediaContentType: MediaContentType!

  """The preview image for the media."""
  previewImage: Image

  """The sources for a video."""
  sources: [VideoSource!]!
}

"""Represents a source for a Shopify hosted video."""
type VideoSource {
  """The format of the video source."""
  format: String!

  """The height of the video."""
  height: Int!

  """The video MIME type."""
  mimeType: String!

  """The URL of the video."""
  url: String!

  """The width of the video."""
  width: Int!
}

"""Units of measurement for weight."""
enum WeightUnit {
  """Metric system unit of mass."""
  GRAMS

  """1 kilogram equals 1000 grams."""
  KILOGRAMS

  """Imperial system unit of mass."""
  OUNCES

  """1 pound equals 16 ounces."""
  POUNDS
}